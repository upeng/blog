<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Taylor&#39;s Learning Diary</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://upeng.github.io/blog/"/>
  <updated>2017-09-27T15:37:09.379Z</updated>
  <id>https://upeng.github.io/blog/</id>
  
  <author>
    <name>Tayloryu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>learning</title>
    <link href="https://upeng.github.io/blog/2017/09/27/learning/"/>
    <id>https://upeng.github.io/blog/2017/09/27/learning/</id>
    <published>2017-09-27T15:37:09.000Z</published>
    <updated>2017-09-27T15:37:09.379Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell脚本由点到面学习总结</title>
    <link href="https://upeng.github.io/blog/2017/09/27/shell-script-learning/"/>
    <id>https://upeng.github.io/blog/2017/09/27/shell-script-learning/</id>
    <published>2017-09-27T14:38:00.000Z</published>
    <updated>2017-09-27T15:39:41.912Z</updated>
    
    <content type="html"><![CDATA[<p>以前只是零零散散写过一些简单的命令行，比如awk、sed、nc、ls、comm这些简单的命令，几乎没有写过一个完整的shell脚本，像循环、条件判断、数据库操作等几乎都没怎么写过，总觉得shell写起来太麻烦，要学习的东西太多了，其实主要是懒。这次由于业务需要，使用shell脚本能方便解决问题，便硬着头皮上了，借着这个机会把常用的命令整理一下，算作温习吧。</p><h2 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a>实现功能：</h2><p>将下面未经处理的原始数据，批量导入到es，并记录导入的数据源；<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">20170101 </span>       ABCD-EF-G001-<span class="number">12345678</span>    <span class="number">1</span>rt2xete3   CD      <span class="number">1.1977199809152</span></div><div class="line"><span class="symbol">20170101 </span>       ABCD-EF-G001-<span class="number">12345678</span>    <span class="number">1</span>rt2xete4   CD      <span class="number">5.856237342947999</span></div><div class="line"><span class="symbol">20170101 </span>       ABCD-EF-G001-<span class="number">12345678</span>    <span class="number">1</span>rt2xete5   CD      <span class="number">5.1901199172992</span></div><div class="line"><span class="symbol">20170101 </span>       ABCD-EF-G001-<span class="number">12345678</span>    <span class="number">1</span>rt2xete6   CD      <span class="number">0.748574988072</span></div><div class="line"><span class="symbol">20170101 </span>       ABCD-EF-G001-<span class="number">12345678</span>    <span class="number">1</span>rt2xete7   CD      <span class="number">2.4472449769392</span></div><div class="line"><span class="symbol">20170101 </span>       ABCD-EF-G001-<span class="number">12345678</span>    <span class="number">1</span>rt2xete8   CD      <span class="number">9.62620145261278</span></div><div class="line"><span class="symbol">20170101 </span>       ABCD-EF-G001-<span class="number">12345678</span>    <span class="number">1</span>rt2xete9   CD      <span class="number">0.1249524996024</span></div></pre></td></tr></table></figure></p><h2 id="问题说明："><a href="#问题说明：" class="headerlink" title="问题说明："></a>问题说明：</h2><ul><li>数据量很大，从1月1号到9月20号，每天一个文件，每个文件大概100w行（约100M），导入es通过http请求，虽然es支持批量bulk导入，但是批量数据大小是有限度的，超过大小直接kill掉</li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>导入到es的数据源需要完整记录备份，作为日志，如果导入失败可以补录。</li><li>虽然数据源每天一个文件堆在一起，但是日志却不能每个文件都放在一个文件夹里，所以需要设计成按年月（如201701,201702）分为一级文件夹，然后按天（如01,02…30）分为二级文件夹,每个文件夹存储当天的源文件，切割文件等信息</li></ul><blockquote><p>step1 获取日期参数，格式Ymd，如果不传则默认取当天日期</p><p>step2 根据日期获取源文件（源文件格式<code>年月日.txt</code>）</p><p>step3 定义输出文件目录格式</p><p>step4 定义es数据源文件</p><p>step5 将源文件格式化成es数据原文件，用到sed命令</p><p>step6 将es数据源文件进行切割，用到split命令</p><p>step7 获取切割后的文件组成数组</p><p>step8 循环调用es接口批量入数据</p></blockquote><h2 id="子脚本剖析"><a href="#子脚本剖析" class="headerlink" title="子脚本剖析"></a>子脚本剖析</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># step1</span></div><div class="line"><span class="meta">#1）条件判断 if [condition]; then command1 else command2 fi</span></div><div class="line"><span class="meta">#2）获取命令行参数 $#，$0，$1...</span></div><div class="line"><span class="meta">#3）复杂条件判断，多个if else;switch case </span></div><div class="line"><span class="meta"># 详细【待总结】</span></div><div class="line"></div><div class="line"><span class="meta">#自定义日期格式 **</span></div><div class="line"><span class="meta">#如：date "+%Y-%m-%d %H:%M:%S" 详细【待总结】 </span></div><div class="line"><span class="meta">#参考：</span></div><div class="line"> http:<span class="comment">//blog.csdn.net/shanliangliuxing/article/details/16821175</span></div><div class="line"> http:<span class="comment">//blog.csdn.net/jk110333/article/details/8590746</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $# -eq <span class="number">0</span> ]; then </div><div class="line">DATE=`date +%Y%m%d`</div><div class="line"><span class="keyword">else</span></div><div class="line">DATE=$<span class="number">1</span></div><div class="line">fi</div><div class="line"></div><div class="line"><span class="meta"># step2</span></div><div class="line">source_file_path=/data/codes</div><div class="line">source_file=$source_file_path/$DATE.txt</div><div class="line"></div><div class="line"><span class="meta"># step3</span></div><div class="line"><span class="meta"># 定义年月、日目录名称, 递归创建多层文件目录</span></div><div class="line"><span class="meta"># 判断文件或目录是否存在，（-d -f）</span></div><div class="line"><span class="meta"># 详细【待总结】</span></div><div class="line">folderYearMonth=`date -d $DATE +<span class="string">"%Y%m"</span>`</div><div class="line">folderDay=`date -d $DATE +<span class="string">"%d"</span>`</div><div class="line">output_file_path=/data/home/upeng/$folderYearMonth/$folderDay</div><div class="line"><span class="keyword">if</span> [ ! -d <span class="string">"$output_file_path"</span> ]; then</div><div class="line">mkdir -p <span class="string">"$output_file_path"</span></div><div class="line">fi</div><div class="line"></div><div class="line"><span class="meta"># step4</span></div><div class="line">es_source_file=$output_file_path/$DATE.json</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># start</span></div><div class="line"><span class="meta"># 转换成时间戳</span></div><div class="line">start_at=$(date +%s)</div><div class="line"></div><div class="line"><span class="meta"># step5</span></div><div class="line"><span class="meta"># sed命令总结；多个sed同时编辑，理解步骤先后顺序</span></div><div class="line"><span class="meta"># 详细【待总结】</span></div><div class="line">sed <span class="string">'s/\t/,/g;s/^/&#123;"date":"&amp;/g;s/,/","brand_code":"/1;s/,/","cid":"/2;s/,/","ad_type":"/3;s/,/","income":"/4;s/$/&amp;"&#125;/g;s/^/&#123;"index":&#123;&#125;&#125;\n&amp;/g'</span> $source_file &gt; $out_json_file</div><div class="line"></div><div class="line"><span class="meta"># step6</span></div><div class="line"><span class="meta"># split 文件切割</span></div><div class="line"><span class="meta"># 详细【待总结】</span></div><div class="line">split -l <span class="number">500000</span> $out_json_file $output_file_path/$date<span class="string">"_"</span></div><div class="line"></div><div class="line"><span class="meta"># step7</span></div><div class="line"><span class="meta"># awk，数组</span></div><div class="line"><span class="meta"># 详细【待总结】</span></div><div class="line">arrs=($(ls -l $output_file_path/$date<span class="string">"_"</span>* | awk <span class="string">'&#123;print $9&#125;'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># step8</span></div><div class="line"><span class="meta"># 循环调用es接口批量入数据</span></div><div class="line"><span class="meta"># 详细【待总结】</span></div><div class="line"><span class="keyword">for</span> arr in $&#123;arrs[@]&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">curl -XPOST <span class="string">'http://127.0.0.1:9200/media/detail/_bulk?pretty'</span> --data-binary @$arr</div><div class="line">done</div><div class="line"></div><div class="line"><span class="meta">#end</span></div><div class="line">end_at=$(date +%s)</div><div class="line">echo <span class="string">"it takes $((end_at-start_at)) seconds"</span></div></pre></td></tr></table></figure><h2 id="父脚本剖析"><a href="#父脚本剖析" class="headerlink" title="父脚本剖析"></a>父脚本剖析</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">source_file_path=/data/codes</div><div class="line">script_path=/data/home/upeng</div><div class="line"><span class="keyword">cd</span> <span class="variable">$source_file_path</span></div><div class="line">DATES=($(<span class="keyword">ls</span> -<span class="keyword">l</span> *<span class="string">".txt"</span> | awk '&#123;<span class="keyword">print</span> <span class="variable">$9&#125;</span>' | awk -F '.' '&#123;<span class="keyword">print</span> <span class="variable">$1&#125;</span>'))</div><div class="line"></div><div class="line"><span class="keyword">for</span> date <span class="keyword">in</span> <span class="variable">$&#123;DATES</span>[@]&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">folderYm=`date -<span class="keyword">d</span> <span class="variable">$DATES</span> +<span class="string">"%Y%m"</span>`</div><div class="line">folderD=`date -<span class="keyword">d</span> <span class="variable">$DATES</span> +<span class="string">"%d"</span>`</div><div class="line">output_file_path=<span class="variable">$script_path</span>/<span class="variable">$folderYm</span>/<span class="variable">$folderD</span></div><div class="line"><span class="keyword">if</span> [ ! -<span class="keyword">d</span> <span class="string">"$output_file_path"</span> ]; then</div><div class="line"><span class="keyword">sh</span> <span class="variable">$script_path</span>/child_script.<span class="keyword">sh</span> <span class="variable">$date</span></div><div class="line"><span class="keyword">cat</span> /dev/null &gt; <span class="variable">$script_path</span>/nohup.<span class="keyword">out</span></div><div class="line">fi</div><div class="line">done</div></pre></td></tr></table></figure><ol><li>上述脚本中<code>待总结</code>的部分是每个点需要完善的面</li><li>上述脚本还有诸多待完善部分，当前只是能够运行，异常情况如何处理如何捕获待整理</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前只是零零散散写过一些简单的命令行，比如awk、sed、nc、ls、comm这些简单的命令，几乎没有写过一个完整的shell脚本，像循环、条件判断、数据库操作等几乎都没怎么写过，总觉得shell写起来太麻烦，要学习的东西太多了，其实主要是懒。这次由于业务需要，使用shel
      
    
    </summary>
    
      <category term="Linux" scheme="https://upeng.github.io/blog/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://upeng.github.io/blog/tags/linux/"/>
    
      <category term="shell" scheme="https://upeng.github.io/blog/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent ORM多个and和or条件查询</title>
    <link href="https://upeng.github.io/blog/2017/09/14/laravel-eloquent-index/"/>
    <id>https://upeng.github.io/blog/2017/09/14/laravel-eloquent-index/</id>
    <published>2017-09-14T14:38:00.000Z</published>
    <updated>2017-09-20T15:14:19.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eloquent-ORM和查询构造器Query-Builder"><a href="#Eloquent-ORM和查询构造器Query-Builder" class="headerlink" title="Eloquent ORM和查询构造器Query Builder"></a>Eloquent ORM和查询构造器Query Builder</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Model::all();</div><div class="line">Model::where();</div><div class="line">Model::groupBy<span class="function"><span class="params">()</span>-&gt;</span>select<span class="function"><span class="params">(<span class="string">'field_name'</span>)</span>-&gt;</span>get<span class="function"><span class="params">()</span>-&gt;</span>toArray()</div></pre></td></tr></table></figure><p>之前一直使用ORM，后面可以尝试使用查询构造器，ORM相比查询构造器，不需要指定table_name和field等信息，但是也有局限性，比如我们经常会需要查询指定字段field<br>对于查询构造器而言是十分方便的select字段名接近原生查询方法，易理解易记忆。<br><a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;select(<span class="string">'name'</span>, <span class="string">'email'</span>)-&gt;get();</div><div class="line"><span class="comment">//那么ORM是否无法查询指定字段呢？当然不是,ORM也是可以滴</span></div><div class="line">Market::all([*])</div><div class="line"><span class="comment">//将Model类作为一个obj，然后链式操作</span></div><div class="line">$market = Marketer::query(); </div><div class="line"><span class="comment">//根据条件选择性地执行下面的条件</span></div><div class="line">$market-&gt;where();</div></pre></td></tr></table></figure></p><p>查询构造可以指定tablename为某个Model的static变量,便于维护。当然查询构造器有很多很好用的查询方式，而且链式操作强悍，实例：<a href="https://cs.laravel-china.org/#db" target="_blank" rel="external">查询构造器</a></p><h3 id="踩到的一个坑"><a href="#踩到的一个坑" class="headerlink" title="踩到的一个坑"></a>踩到的一个坑</h3><blockquote><p>多个or和and条件查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> (<span class="keyword">id</span>=<span class="number">2</span> <span class="keyword">or</span> <span class="keyword">name</span>=<span class="string">'taylor'</span> <span class="keyword">or</span> age=<span class="number">27</span>) <span class="keyword">and</span> address=<span class="string">'shanghai'</span></div><div class="line"></div><div class="line"><span class="keyword">Users</span>::<span class="keyword">where</span>(<span class="keyword">id</span>, <span class="number">2</span>)</div><div class="line">    -&gt;orWhere(<span class="keyword">name</span>, <span class="string">'taylor'</span>)</div><div class="line">    -&gt;orWhere(age, <span class="number">27</span>)</div><div class="line">    -&gt;<span class="keyword">where</span>(address, <span class="string">'shanghai'</span>)</div></pre></td></tr></table></figure><p>发现结果和预期不同，因为<code>and</code>逻辑会先于<code>or</code>，所以会出现问题，那么如何<strong>按照我们指定的顺序</strong>去查询？官方手册并未这么详细，在Stack Overflow找到了答案：<br><a href="https://stackoverflow.com/questions/30434037/laravel-5-eloquent-where-and-or-in-clauses" target="_blank" rel="external">Laravel 5 Eloquent where and or in Clauses</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$market-&gt;where( &#123;</div><div class="line">Users::where(<span class="function"><span class="keyword">function</span><span class="params">($q)</span></span>&#123;</div><div class="line">    $q-&gt;where(<span class="string">'id'</span>, <span class="number">2</span>)</div><div class="line">    -&gt;orWhere(<span class="string">'name'</span>, <span class="string">'taylor'</span>)</div><div class="line">    -&gt;orWhere(<span class="string">'age'</span>, <span class="number">27</span>)</div><div class="line">&#125;)-&gt;where(<span class="string">'address'</span>, <span class="string">'shanghai'</span>);</div><div class="line"></div><div class="line"></div><div class="line">继续，还有坑，因为我们传递的都是数值和字符串，正常情况是变量</div><div class="line"></div><div class="line">$id = <span class="number">2</span>;</div><div class="line">$market-&gt;where( &#123;</div><div class="line">Users::where(<span class="function"><span class="keyword">function</span><span class="params">($q)</span></span>&#123;</div><div class="line">    $q-&gt;where(<span class="string">'id'</span>, $id)</div><div class="line">    -&gt;orWhere(<span class="string">'name'</span>, <span class="string">'taylor'</span>)</div><div class="line">    -&gt;orWhere(<span class="string">'age'</span>, <span class="number">27</span>)</div><div class="line">&#125;)-&gt;where(<span class="string">'address'</span>, <span class="string">'shanghai'</span>);</div></pre></td></tr></table></figure><p><code>Error: $id is not definied</code><br><code>Reason:</code> 匿名函数内部的<code>where</code>和<code>orWhere</code>是一起的（括号），但是在匿名函数内是取不到其外部的变量的，可以在<code>function</code>内部传参数解决，也可以将变量赋值成成员变量解决；<br>比如<code>$this-&gt;id = 2；</code>这样可以 将<code>$id</code> 改成<code>$this-&gt;id</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Eloquent-ORM和查询构造器Query-Builder&quot;&gt;&lt;a href=&quot;#Eloquent-ORM和查询构造器Query-Builder&quot; class=&quot;headerlink&quot; title=&quot;Eloquent ORM和查询构造器Query Builder&quot;&gt;&lt;/a&gt;Eloquent ORM和查询构造器Query Builder&lt;/h3&gt;&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Model::all();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Model::where();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Model::groupBy&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;-&amp;gt;&lt;/span&gt;select&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;field_name&#39;&lt;/span&gt;)&lt;/span&gt;-&amp;gt;&lt;/span&gt;get&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;-&amp;gt;&lt;/span&gt;toArray()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之前一直使用ORM，后面可以尝试使用查询构造器，ORM相比查询构造器，不需要指定table_name和field等信息，但是也有局限性，比如我们经常会需要查询指定字段field&lt;br&gt;对于查询构造器而言是十分方便的select字段名接近原生查询方法，易理解易记忆。&lt;br&gt;
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://upeng.github.io/blog/tags/laravel/"/>
    
      <category term="eloquent" scheme="https://upeng.github.io/blog/tags/eloquent/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用压缩解压缩命令</title>
    <link href="https://upeng.github.io/blog/2017/09/10/Linux%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4-index/"/>
    <id>https://upeng.github.io/blog/2017/09/10/Linux压缩解压缩命令-index/</id>
    <published>2017-09-10T13:00:00.000Z</published>
    <updated>2017-09-19T17:57:02.105Z</updated>
    
    <content type="html"><![CDATA[<p><strong>tar后缀文件</strong><br>//解包<br><code>tar xvf FileName.tar</code><br>//打包<br><code>tar cvf FileName.tar DirName</code></p><p><strong>zip后缀文件</strong><br>//解压<br><code>unzip FileName.zip</code><br>//压缩<br><code>zip FileName.zip DirName</code><br>压缩一个目录使用 -r 参数，-r 递归。例： <code>$ zip -r FileName.zip DirName</code></p><a id="more"></a><p><strong>tar.gz 和 .tgz后缀文件</strong><br>//解压<br><code>tar zxvf FileName.tar.gz</code><br>//压缩<br><code>tar zcvf FileName.tar.gz DirName</code></p><p><strong>rar后缀文件</strong><br>//解压<br><code>rar x FileName.rar</code><br>//压缩<br><code>rar a FileName.rar DirName</code><br>rar请到：<code>http://www.rarsoft.com/download.htm</code> 下载！<br>解压后请将<code>rar_static</code>拷贝到<code>/usr/bin</code>目录（其他由$PATH环境变量指定的目录也可以）：<br><code>[root@www]# cp rar_static /usr/bin/rar</code>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;tar后缀文件&lt;/strong&gt;&lt;br&gt;//解包&lt;br&gt;&lt;code&gt;tar xvf FileName.tar&lt;/code&gt;&lt;br&gt;//打包&lt;br&gt;&lt;code&gt;tar cvf FileName.tar DirName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;zip后缀文件&lt;/strong&gt;&lt;br&gt;//解压&lt;br&gt;&lt;code&gt;unzip FileName.zip&lt;/code&gt;&lt;br&gt;//压缩&lt;br&gt;&lt;code&gt;zip FileName.zip DirName&lt;/code&gt;&lt;br&gt;压缩一个目录使用 -r 参数，-r 递归。例： &lt;code&gt;$ zip -r FileName.zip DirName&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://upeng.github.io/blog/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://upeng.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装LNMP(Nginx+PHP5.6)环境</title>
    <link href="https://upeng.github.io/blog/2016/08/28/mac-lnmp/"/>
    <id>https://upeng.github.io/blog/2016/08/28/mac-lnmp/</id>
    <published>2016-08-28T14:28:49.000Z</published>
    <updated>2017-09-14T16:44:21.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>从零开始安装Mac下LNMP环境的过程</p><blockquote><p>确保系统已经安装xcode，然后使用一行命令安装依赖管理工具Homebrew</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/<span class="keyword">install</span>/<span class="keyword">master</span>/<span class="keyword">install</span>)<span class="string">"</span></div></pre></td></tr></table></figure><p>之后就可以使用<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>FORMULA</div></pre></td></tr></table></figure></p><p>来安装所需要的依赖了.更详细的信息参考Homebrew的[官方Cookbook][1]</p><p>因此使用Homebrew常见的流程是：</p><ol><li>增加一个程序源（新增一个水龙头） brew tap homebrew/php</li><li>更新程序源 brew update</li><li>安装程序包（按照配方酿酒） brew install git</li><li>查看配置 brew config 可以看到程序包默认安装在/usr/local/Cellar下 （酒桶放在地窖内）<a id="more"></a><h2 id="安装PHP5-6（FPM方式）"><a href="#安装PHP5-6（FPM方式）" class="headerlink" title="安装PHP5.6（FPM方式）"></a>安装PHP5.6（FPM方式）</h2>首先加入Homebrew官方的几个软件源<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>tap homebrew/dupes</div><div class="line"><span class="keyword">brew </span>tap homebrew/versions</div><div class="line"><span class="keyword">brew </span>tap homebrew/php</div></pre></td></tr></table></figure></li></ol><p>PHP如果采用默认配置安装，会编译mod_php模块并只运行在Apache环境下，为了使用Nginx，这里需要编译php-fpm并且禁用apache，主要通过参数<code>--without-fpm --without-apache</code>来实现。完整的安装指令为<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">brew install php56 \</div><div class="line">-<span class="ruby">-without-snmp \</span></div><div class="line"><span class="ruby">--without-apache \</span></div><div class="line"><span class="ruby">--with-debug \</span></div><div class="line"><span class="ruby">--with-fpm \</span></div><div class="line"><span class="ruby">--with-intl \</span></div><div class="line"><span class="ruby">--with-homebrew-curl \</span></div><div class="line"><span class="ruby">--with-homebrew-libxslt \</span></div><div class="line"><span class="ruby">--with-homebrew-openssl \</span></div><div class="line"><span class="ruby">--with-imap \</span></div><div class="line"><span class="ruby">--with-mysql \</span></div><div class="line"><span class="ruby">--with-tidy</span></div></pre></td></tr></table></figure></p><p>由于OSX已经自带了PHP5.5环境，因此需要修改系统路径，优先运行brew安装的版本，在<code>~/.bashrc</code>里加入：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/usr/local/bin:/usr/local/sbin:<span class="variable">$PATH</span>"</span></div></pre></td></tr></table></figure></p><blockquote><p>这时运行 php -v查看版本是否是5.6<br>运行php -m 查看PHP安装都扩展列表</p></blockquote><p>如果要安装新的php扩展，可以直接安装而不用每次重新编译php，所有的扩展可以通过<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>search php56</div></pre></td></tr></table></figure></p><p>看到，下面是我自己所需要的扩展，可以支持Phalcon框架：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install php56-gearman php56-msgpack php56-memcache php56-memcached php56-mongo  php56-phalcon php56-redis php56-xdebug</div></pre></td></tr></table></figure></p><h3 id="PHP-FPM的加载与启动"><a href="#PHP-FPM的加载与启动" class="headerlink" title="PHP-FPM的加载与启动"></a>PHP-FPM的加载与启动</h3><p>php-fpm.conf  php.ini<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.6</span></div></pre></td></tr></table></figure></p><p>php-fpm进程<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="keyword">local</span>/sbin</div></pre></td></tr></table></figure></p><p><strong>安装完毕后可以通过以下指令启动和停止php-fpm</strong><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">./php-fpm</span> -D    <span class="string">//</span>进入sbin目录</div><div class="line"></div><div class="line">killall php-fpm</div></pre></td></tr></table></figure></p><p>同时可以将php-fpm加入开机启动<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -sfv <span class="string">/usr/local/opt/php56/</span>*<span class="string">.plist</span> ~<span class="string">/Library/LaunchAgents</span></div><div class="line"></div><div class="line">launchctl load ~<span class="string">/Library/LaunchAgents/homebrew.mxcl.php56.plist</span></div></pre></td></tr></table></figure></p><h3 id="查看php-fpm进程"><a href="#查看php-fpm进程" class="headerlink" title="查看php-fpm进程"></a>查看php-fpm进程</h3><p>查看9000端口<br><code>lsof -i:9000</code><br>或者<br><code>ps -ef | grep php-fpm</code></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>nginx</div></pre></td></tr></table></figure><p>安装完毕后可以通过<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nginx</div><div class="line">nginx -<span class="keyword">s</span> <span class="keyword">quit</span></div></pre></td></tr></table></figure></p><p>启动和关闭，同时也支持重载配置文件等操作<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload|<span class="type">reopen</span>|<span class="type">stop</span>|<span class="type">quit</span></div></pre></td></tr></table></figure></p><p>nginx安装后默认监听8080端口，可以访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 查看状态。如果要想监听80端口需要root权限，运行</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chown <span class="string">root:</span>wheel <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>nginx<span class="regexp">/1.6.2/</span>bin/nginx</div><div class="line">sudo chmod u+s <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>nginx<span class="regexp">/1.6.2/</span>bin/nginx</div></pre></td></tr></table></figure><blockquote><p>我是直接在nginx配置中改成80端口，然后重启生效<br>并使用root权限启动</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo nginx</span></div></pre></td></tr></table></figure><p>开机启动<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -sfv <span class="string">/usr/local/opt/nginx/</span>*<span class="string">.plist</span> ~<span class="string">/Library/LaunchAgents</span></div><div class="line"></div><div class="line">launchctl load ~<span class="string">/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span></div></pre></td></tr></table></figure></p><h2 id="Nginx-PHP-FPM配置"><a href="#Nginx-PHP-FPM配置" class="headerlink" title="Nginx + PHP-FPM配置"></a>Nginx + PHP-FPM配置</h2><p>好文：<a href="http://www.nginx.cn/nginx-how-to" target="_blank" rel="external">http://www.nginx.cn/nginx-how-to</a></p><p>Nginx一般都会运行多个域名（虚拟主机）</p><blockquote><p>按Ubuntu的文件夹结构来存放Nginx的配置文件</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/<span class="keyword">var</span>/logs/nginx</div><div class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/sites-available</div><div class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/sites-enabled</div><div class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/<span class="keyword">conf</span>.<span class="built_in">d</span></div><div class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/etc/nginx/ssl</div></pre></td></tr></table></figure><blockquote><p>联想到work中，vhost和fpm.d目录，新增域名与目录时，只需要增加两个配置文件；前提时php-fpm.conf和nginx.conf主配置文件中都有</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">include</span> vhost/<span class="regexp">*.conf</span></div><div class="line">include fpm.d/<span class="regexp">*.conf</span></div></pre></td></tr></table></figure><p><strong>上述都conf.d等同于fpm.d，sites-enabled等同于vhost</strong></p><h3 id="编辑Nginx全局配置"><a href="#编辑Nginx全局配置" class="headerlink" title="编辑Nginx全局配置"></a>编辑Nginx全局配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf</span></div></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</div><div class="line"><span class="attribute">error_log</span>   /usr/local/var/logs/nginx/error.log <span class="literal">debug</span>;</div><div class="line"><span class="attribute">pid</span>        /usr/local/var/run/nginx.pid;</div><div class="line"></div><div class="line"><span class="section">events</span> &#123;</div><div class="line">    <span class="attribute">worker_connections</span>  <span class="number">256</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="attribute">include</span>       mime.types;</div><div class="line">    <span class="attribute">default_type</span>  application/octet-stream;</div><div class="line"></div><div class="line">    <span class="attribute">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] '</span></div><div class="line">        <span class="string">'"<span class="variable">$request</span>" <span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> '</span></div><div class="line">        <span class="string">'"<span class="variable">$http_referer</span>" "<span class="variable">$http_user_agent</span>" '</span></div><div class="line">        <span class="string">'"<span class="variable">$http_x_forwarded_for</span>" <span class="variable">$host</span> <span class="variable">$request_time</span> <span class="variable">$upstream_response_time</span> <span class="variable">$scheme</span> '</span></div><div class="line">        <span class="string">'<span class="variable">$cookie_evalogin</span>'</span>;</div><div class="line"></div><div class="line">    <span class="attribute">access_log</span>  /usr/local/var/logs/access.log  main;</div><div class="line"></div><div class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</div><div class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</div><div class="line">    <span class="attribute">port_in_redirect</span> <span class="literal">off</span>;</div><div class="line"></div><div class="line">    <span class="attribute">include</span> /usr/local/etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样一来首先可以把一些可复用配置独立出来放在<code>/usr/local/etc/nginx/conf.d</code>下，比如fastcgi的设置就可以独立出来<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>php-fpm</div></pre></td></tr></table></figure></p><p>内容为<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</div><div class="line">    <span class="attribute">try_files</span>                   <span class="variable">$uri</span> = <span class="number">404</span>;</div><div class="line">    <span class="attribute">fastcgi_pass</span>                <span class="number">127.0.0.1:9000</span>;</div><div class="line">    <span class="attribute">fastcgi_index</span>               index.php;</div><div class="line">    <span class="attribute">fastcgi_intercept_errors</span>    <span class="literal">on</span>;</div><div class="line">    <span class="attribute">include</span> /usr/local/etc/nginx/fastcgi.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后<code>/usr/local/etc/nginx/sites-enabled</code>目录下可以一个文件对应一个域名的配置，比如web服务器目录是<code>/opt/htdocs</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span><span class="keyword">default</span></div></pre></td></tr></table></figure></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span>  localhost;</div><div class="line">    <span class="attribute">root</span>         /opt/htdocs/;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">index</span>  index.html index.htm index.php;</div><div class="line">        <span class="attribute">include</span>     /usr/local/etc/nginx/conf.d/php-fpm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此时启动了php-fpm并且启动了Nginx后，就可以通过<a href="http://localhost来运行php程序了" target="_blank" rel="external">http://localhost来运行php程序了</a></p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>mysql</div></pre></td></tr></table></figure><p>可以通过<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql<span class="selector-class">.server</span> start</div><div class="line">mysql<span class="selector-class">.server</span> stop</div></pre></td></tr></table></figure></p><p>来启动／停止，启动后默认应为空密码，可以通过mysqladmin设置一个密码<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">mysqladmin</span> -uroot password <span class="string">"mypassword"</span></div></pre></td></tr></table></figure></p><p>但是在操作的时候出现了空密码无法登入的情况，最终只能通过mysqld_safe来设置<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo mysqld_safe --skip-grant-tables</div><div class="line">mysql -u root</div><div class="line">mysql&gt; <span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">Password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'mypassword'</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span>=<span class="string">'root'</span>;</div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div></pre></td></tr></table></figure></p><p><strong>依旧报错</strong></p><blockquote><p><strong>坑1</strong>：一直出现mysql.sock错误，<code>mysql -uroot -p</code>;<br><strong>填坑1</strong>：<code>mysql -h 127.0.0.1 -u root -p</code>  why?</p><p><strong>坑2</strong>：设置密码报错：<code>Password</code>字段不存在<br><strong>填坑2</strong>：mysql5.7已将<code>Password</code>字段去掉，改成<code>authentication_string</code>；所以正确都姿势如下：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> mysql.<span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123qwe'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root</span></div></pre></td></tr></table></figure></p><p>老版本mysql没变</p></blockquote><p>最后将MySQL加入开机启动<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/my</span>sql<span class="regexp">/5.6.22/</span>homebrew.mxcl.mysql.plist ~<span class="regexp">/Library/</span>LaunchAgents<span class="regexp">/</span></div></pre></td></tr></table></figure></p><h2 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew services <span class="built_in">list</span></div></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Name  Status  User    Plist</div><div class="line">mysql started root    /Library/LaunchDaemons/homebrew<span class="selector-class">.mxcl</span><span class="selector-class">.mysql</span><span class="selector-class">.plist</span></div><div class="line">nginx started yupeng6 /Users/yupeng6/Library/LaunchAgents/homebrew<span class="selector-class">.mxcl</span><span class="selector-class">.nginx</span><span class="selector-class">.plist</span></div><div class="line">php56 started yupeng6 /Users/yupeng6/Library/LaunchAgents/homebrew<span class="selector-class">.mxcl</span><span class="selector-class">.php56</span><span class="selector-class">.plist</span></div></pre></td></tr></table></figure><p>安装redis和memcache过程省略，详见下面博文，本文也是参考此<br><a href="http://avnpc.com/pages/install-lnmp-on-osx" target="_blank" rel="external">http://avnpc.com/pages/install-lnmp-on-osx</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Homebrew&quot;&gt;&lt;a href=&quot;#安装Homebrew&quot; class=&quot;headerlink&quot; title=&quot;安装Homebrew&quot;&gt;&lt;/a&gt;安装Homebrew&lt;/h2&gt;&lt;p&gt;从零开始安装Mac下LNMP环境的过程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确保系统已经安装xcode，然后使用一行命令安装依赖管理工具Homebrew&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/&lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;master&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后就可以使用&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;FORMULA&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来安装所需要的依赖了.更详细的信息参考Homebrew的[官方Cookbook][1]&lt;/p&gt;
&lt;p&gt;因此使用Homebrew常见的流程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增加一个程序源（新增一个水龙头） brew tap homebrew/php&lt;/li&gt;
&lt;li&gt;更新程序源 brew update&lt;/li&gt;
&lt;li&gt;安装程序包（按照配方酿酒） brew install git&lt;/li&gt;
&lt;li&gt;查看配置 brew config 可以看到程序包默认安装在/usr/local/Cellar下 （酒桶放在地窖内）
    
    </summary>
    
      <category term="其他" scheme="https://upeng.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Mac" scheme="https://upeng.github.io/blog/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>首次折腾Mac</title>
    <link href="https://upeng.github.io/blog/2016/08/28/mac-primary/"/>
    <id>https://upeng.github.io/blog/2016/08/28/mac-primary/</id>
    <published>2016-08-28T02:09:29.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>delete（backspac）</li><li>fn＋delete（后删）</li><li>option＋v ＝ √</li><li>command ＋ space ＝ spotlight</li><li>option ＋ space ＝ hotkey window 呼起item2</li><li>control ＋ space ＝ 输入法切换</li></ul><h3 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h3><p>查看<strong>Mac开发配置手册</strong>省了很多时间<br><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">https://aaaaaashu.gitbooks.io/mac-dev-setup/content/</a><br>iTem2文档也是相当之多<br><a href="https://leohxj.gitbooks.io/a-programmer-prepares/content/software/mac/softwares/iTerm2.html" target="_blank" rel="external">https://leohxj.gitbooks.io/a-programmer-prepares/content/software/mac/softwares/iTerm2.html</a><br><a id="more"></a></p><blockquote><p><strong>坑</strong>：在App Store中安装xcode，总是提示第一次使用，需要输入一堆东西，然而没有什么卵用，浪费了我好多时间。果断去<code>https://developer.apple.com/xcode/</code>下载,下载Xcode command line tools即可，只有几百M.</p></blockquote><h4 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h4><p>mac下的包管理工具，类似于ubuntu的apt-get<br>brew install nginx ＝ apt-get install nginx</p><h4 id="安装iTem2"><a href="#安装iTem2" class="headerlink" title="安装iTem2"></a>安装iTem2</h4><blockquote><p><strong>坑</strong>：字体乱码<br>安装字体即可：monaco for powerline下载安装完成后在设置中设为该字体即可</p></blockquote><ul><li>hotkey window      //option ＋ space启动</li><li>default           //dock中的快速启动<br>二者均可在<code>profiles/open profies/edit profiles</code>; 设置<code>color，text</code>等等</li></ul><h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><p><code>hostname</code>  //查看hostname<br><code>sudo scutil --set HostName MacBook-pro</code>   //修改hostname</p><h4 id="安装开发环境LNMP"><a href="#安装开发环境LNMP" class="headerlink" title="安装开发环境LNMP"></a>安装开发环境LNMP</h4><p>鼓捣了好久，最后还是按照下面这个教程来操作了，从零开始安装Mac下的LNMP环境的过程</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;delete（backspac）&lt;/li&gt;
&lt;li&gt;fn＋delete（后删）&lt;/li&gt;
&lt;li&gt;option＋v ＝ √&lt;/li&gt;
&lt;li&gt;command ＋ space ＝ spotlight&lt;/li&gt;
&lt;li&gt;option ＋ space ＝ hotkey window 呼起item2&lt;/li&gt;
&lt;li&gt;control ＋ space ＝ 输入法切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开发配置&quot;&gt;&lt;a href=&quot;#开发配置&quot; class=&quot;headerlink&quot; title=&quot;开发配置&quot;&gt;&lt;/a&gt;开发配置&lt;/h3&gt;&lt;p&gt;查看&lt;strong&gt;Mac开发配置手册&lt;/strong&gt;省了很多时间&lt;br&gt;&lt;a href=&quot;https://aaaaaashu.gitbooks.io/mac-dev-setup/content/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://aaaaaashu.gitbooks.io/mac-dev-setup/content/&lt;/a&gt;&lt;br&gt;iTem2文档也是相当之多&lt;br&gt;&lt;a href=&quot;https://leohxj.gitbooks.io/a-programmer-prepares/content/software/mac/softwares/iTerm2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leohxj.gitbooks.io/a-programmer-prepares/content/software/mac/softwares/iTerm2.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://upeng.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Mac" scheme="https://upeng.github.io/blog/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>laravel基础任务学习清单</title>
    <link href="https://upeng.github.io/blog/2016/08/15/laravel-basic/"/>
    <id>https://upeng.github.io/blog/2016/08/15/laravel-basic/</id>
    <published>2016-08-15T14:24:32.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Restful路由"><a href="#关于Restful路由" class="headerlink" title="关于Restful路由"></a>关于Restful路由</h2><p><code>Route::resource(&#39;task&#39;, &#39;TaskController&#39;);</code><br>产生多条路由，<code>POST/DELTE/PUT/GET</code>，对应着<code>TaskController</code>的各个方法；<br>对于laravel5.2，使用 <code>php artisan make:controller TaskController --resource</code>可产生默认的多种方法<br>通过<code>php artisan route:list</code>可以显示已经注册的路由列表</p><p><img src="https://raw.githubusercontent.com/upeng/upeng.github.io/master/image/laravel-route-list.png" alt="laravel-route-list"></p><a id="more"></a><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><blockquote><p>store、update方法常使用</p></blockquote><p>基地控制器<code>Controller</code>内使用了<code>ValidatesRequests</code>这个<code>trait</code>，因此他为所有的控制器都提供了方便的<code>validate</code>验证方法。</p><blockquote><p>调研了解trait机制，为什么TestController use了这个trait，TestController 就可以使用ValidatesRequests的validate方法</p></blockquote><h3 id="最原始的表单验证（Controller中）"><a href="#最原始的表单验证（Controller中）" class="headerlink" title="最原始的表单验证（Controller中）"></a>最原始的表单验证（Controller中）</h3><p>validate方法会验证接受HTTP传入的请求与验证规则，如果验证通过，我们的代码才会继续向下运行。如果验证失败会抛出异常错误返回给用户。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//验证用户请求</span></div><div class="line"><span class="keyword">$this</span>-&gt;validate($request,[</div><div class="line"><span class="string">'name'</span> =&gt; <span class="string">'required'</span>,</div><div class="line"><span class="string">'content'</span> =&gt; <span class="string">'required|min:5'</span>,</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="comment">//通过验证，保存至数据库</span></div><div class="line">Task::create($request);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>说明</strong>：我们将验证规则传递到<code>validate</code>方法中，如果验证失败，则自动生成一个对应的响应。并将验证的错误提醒闪存至<code>session</code>，也就是<code>$errors</code>。当验证失败时，用户将被重定向到我们的控制器 <code>create</code>方法，让我们在视图中显示错误的消息：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">if</span> (<span class="keyword">count</span>(<span class="variable">$errors</span>) &gt; 0)</div><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"alert alert-danger"</span>&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">@<span class="keyword">foreach</span> (<span class="variable">$errors</span>-&gt;all() <span class="keyword">as</span> <span class="variable">$error</span>)</div><div class="line">&lt;<span class="keyword">li</span>&gt;&#123;&#123;<span class="variable">$error&#125;</span>&#125;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">@endif</div></pre></td></tr></table></figure></p><p><strong>补充</strong>：正常情况下我们想要把错误显示在对应的字段旁边，而不是一起显示在一个列表中；我们打印<code>session</code>中的<code>$errors-&gt;all()</code>是数字索引数组;</p><blockquote><p>要查看特定字段的第一个错误消息【比较常见的场景】</p></blockquote><p><strong>方法如下：</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@if</span> ($errors-&gt;has(<span class="string">'name'</span>))</div><div class="line">$errors-&gt;first(<span class="string">'name'</span>);</div><div class="line"><span class="variable">@endif</span></div><div class="line"></div><div class="line"><span class="variable">@if</span> ($error-&gt;has(<span class="string">'content'</span>))</div><div class="line">$error-&gt;first(<span class="string">'content'</span>);</div><div class="line"><span class="variable">@endif</span></div></pre></td></tr></table></figure></p><blockquote><p>我们想要得到一个字段对应的所有error</p></blockquote><p><strong>方法如下</strong>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span> ($error-&gt;get(<span class="string">'content'</span>) <span class="keyword">as</span> $message)</div><div class="line">&#123;</div><div class="line"><span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="表单请求验证，自定义请求类"><a href="#表单请求验证，自定义请求类" class="headerlink" title="表单请求验证，自定义请求类"></a>表单请求验证，自定义请求类</h3><blockquote><p>php artisan make request TaskFormReuest;</p></blockquote><p>这时会在<code>Http/Requests</code>目录生成<code>TaskFormReuest.php</code>,修改<code>rules</code>方法，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//权限判断</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//验证规则</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'name'</span> =&gt; <span class="string">'required|min:5'</span>,</div><div class="line">    ];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//也可以自定义message方法</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'title.required'</span> =&gt; <span class="string">'标题是必填的'</span>,</div><div class="line">        <span class="string">'body.required'</span>  =&gt; <span class="string">'消息是必填的'</span>,</div><div class="line">    ];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//messages还可以这样动态设置</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span> [</div><div class="line"><span class="string">'required'</span> =&gt; <span class="string">':attribute 是必填字段'</span>,</div><div class="line"><span class="string">'min'</span>=&gt; <span class="string">':attribute 长度不小于 :min'</span>,</div><div class="line">];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="手动创建验证程序"><a href="#手动创建验证程序" class="headerlink" title="手动创建验证程序"></a>手动创建验证程序</h3><p>不使用validatesRequests的validate方法<br>我们可以use Validator类，手动创建一个validator实例，并通过Validator::make()生成一个新的validator</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Validator</span>;</div><div class="line">...</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$validator = Validtor::make($request-&gt;all(),[</div><div class="line"><span class="string">'name'</span> =&gt; <span class="string">'requeire'</span>,</div><div class="line"><span class="string">'content'</span> =&gt; <span class="string">'require|min:6'</span>,</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($validator-&gt;fails())</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> redirect()-&gt;action(<span class="string">'TaskController@index'</span>)</div><div class="line">-&gt;withErrors($validator)</div><div class="line">        -&gt;withInput();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注</strong>：<code>Validator::make($param1, $param2)</code>，其中<code>$param1</code>是验证的数据，<code>$params</code>是规则</p><h2 id="model操作"><a href="#model操作" class="headerlink" title="model操作"></a>model操作</h2><p>增：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> Task::create($request);</div><div class="line"><span class="number">2.</span> </div><div class="line">$task = <span class="keyword">new</span> Task();</div><div class="line">$task-&gt;name = $request-&gt;name;</div><div class="line">$task-&gt;created_at = Carbon::now();</div><div class="line">$task-&gt;save();</div></pre></td></tr></table></figure></p><p>删：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.<span class="symbol">Task:</span><span class="symbol">:destroy</span>(<span class="variable">$id</span>);</div><div class="line"><span class="number">2</span>.<span class="symbol">Task:</span><span class="symbol">:findOrFail</span>(<span class="variable">$id</span>)-&gt;delete();</div></pre></td></tr></table></figure></p><p>改:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Task:</span><span class="symbol">:update</span>(<span class="variable">$request</span>, <span class="variable">$id</span>);</div></pre></td></tr></table></figure></p><p>查：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>Task::all();</div><div class="line"><span class="number">2.</span>Task::<span class="keyword">where</span>()-&gt;get();</div><div class="line"><span class="number">3.</span>Task::orderBy(<span class="string">'created_at'</span>, <span class="string">'desc'</span>)-&gt;get();</div></pre></td></tr></table></figure></p><h2 id="factory工厂模型使用"><a href="#factory工厂模型使用" class="headerlink" title="factory工厂模型使用"></a>factory工厂模型使用</h2><ul><li><code>Task Model</code>中设置  <code>protected $fillable = [&#39;name&#39;, &#39;created_at&#39;]</code>;</li><li><p><code>datebase/factories/ModelFactory.php</code>新增</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\Task::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'name'</span> =&gt; $faker-&gt;sentence,</div><div class="line">        <span class="string">'created_at'</span> =&gt; Carbon\Carbon::now(),</div><div class="line">    ];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p><code>php artisan tinker</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">namespace App<span class="comment">;</span></div><div class="line">factory(<span class="name">App</span>\Task:<span class="symbol">:class</span>,<span class="number">5</span>)-&gt;create()<span class="comment">;</span></div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于Restful路由&quot;&gt;&lt;a href=&quot;#关于Restful路由&quot; class=&quot;headerlink&quot; title=&quot;关于Restful路由&quot;&gt;&lt;/a&gt;关于Restful路由&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Route::resource(&amp;#39;task&amp;#39;, &amp;#39;TaskController&amp;#39;);&lt;/code&gt;&lt;br&gt;产生多条路由，&lt;code&gt;POST/DELTE/PUT/GET&lt;/code&gt;，对应着&lt;code&gt;TaskController&lt;/code&gt;的各个方法；&lt;br&gt;对于laravel5.2，使用 &lt;code&gt;php artisan make:controller TaskController --resource&lt;/code&gt;可产生默认的多种方法&lt;br&gt;通过&lt;code&gt;php artisan route:list&lt;/code&gt;可以显示已经注册的路由列表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/upeng/upeng.github.io/master/image/laravel-route-list.png&quot; alt=&quot;laravel-route-list&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://upeng.github.io/blog/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>vuejs与后台数据的交互实践</title>
    <link href="https://upeng.github.io/blog/2016/07/17/vuejs/"/>
    <id>https://upeng.github.io/blog/2016/07/17/vuejs/</id>
    <published>2016-07-17T07:58:17.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vuejs是MVVM框架，数据和DOM视图双向绑定，数据驱动的 web 界面的库。</p><p><strong>响应的数据绑定</strong>：数据与DOM保持同步非常简单，数据发生变化的时候，如果我们使用JQuery操作DOM的话自然是可行的，但是jQuery操作DOM代码复杂容易出错，就拿一个简单的例子，在列表中新增一行数据，使用JQuery可能会刷新整个DOM,并对页面refresh。但是vue实现数据与DOM的绑定后，只要数据发生变化，就自动改动DOM，所以我们的工作重点就是修改数据，不必与DOM更新搅在一起。</p><p><strong>我的理解</strong>：Vuejs简化了操作DOM或者不再去手动操作DOM，一个简单的API就搞定了DOM的自动更新，让我们脱离了使用Js操作DOM的复杂流程。这也是Vue的迷人之处吧，其他的优点诸如：组件化、模块化、体积小等优点我就不再罗列了，本文重点也不在此。<br><a id="more"></a><br>那么问题来了</p><h2 id="vuejs与后端（比如PHP）是如何交互的？"><a href="#vuejs与后端（比如PHP）是如何交互的？" class="headerlink" title="vuejs与后端（比如PHP）是如何交互的？"></a>vuejs与后端（比如PHP）是如何交互的？</h2><p>怎么使用Vuejs与后台数据（这里是指后台的数据库，不是vuejs的model，因为我理解的vuejs的model仍是前端数据）交互？其实这个问题本身就存在问题，（这是最初是对vuejs不怎么了解的情况下做出的提问），事实上vuejs <strong>关注点</strong>是如何优雅的操作DOM或者减少手动操作DOM，至于与后台的交互，这是js（当然vuejs也是基于js啊）要做的事情，所以<strong>正确的提问姿势</strong>应该是：<em>js怎样和后端交互？</em> 那么现在这个问题就变得简单了。我们知道js是不能直接操作数据库的，但是ajax却架起前后端的桥梁，能让前后端数据进行交互。</p><blockquote><p>当然vuejs作为js衍生出的框架，它除了具有js的特性外，还有自己的特色呢，所以vuejs可以使用vue-resource来与后端交互。</p></blockquote><p>下面使用ajax(基于jquery)、vuejs、php实现简单的数据的增删改查。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">url</span> = <span class="string">'http://localhost:8080/vuejs/api/book.php'</span>;</div><div class="line">getJson(<span class="built_in">url</span>, pushDom);</div></pre></td></tr></table></figure><p>分析getJson函数【已经封装】</p><ol><li>初始化信息列表</li><li>两个参数：<br>（1）第一个是获取列表的接口地址url；<br>（2）第二个是回调函数名</li><li>流程分析：<br>在getJson中通过ajax调取接口url获取数据data，然后将data作为参数调用pushDom函数，pushDom是展示、或者使用vue操作DOM的功能函数。那么怎么使用jquey、ajax配合vue进行后端数据库增删改查。<br>首先需要对vue的增删改查机制了如指掌才行；methods事件触发，我们可以在methods中定义add、delete、modify完成数据的绑定，异步刷新显示；同时将获取的数据传递给封装好的ajax函数中，与后端交互【正确的流程应该与后台交互成功才会自动更新DOM，这里不细论】；例如<br><strong>添加数据</strong>：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">methods:&#123;</div><div class="line">    addBook:function()&#123;</div><div class="line">        <span class="keyword">this</span>.book.id=parseInt(postData(<span class="keyword">this</span>.book));</div><div class="line">        <span class="keyword">this</span>.books.push(<span class="keyword">this</span>.book);</div><div class="line">        <span class="keyword">this</span>.book=<span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>我们从前端拿到的数据<code>this.book</code>，然后调用<code>postData(this.book)</code>;<code>postData</code>就是一个与后端交互的封装了ajax的函数<br>期间遇到了一点小意外，总是获取不到ajax的返回值，关于如何获取ajax返回值和为何获取不到ajax中的值问题，<code>postData</code>函数中写的很清楚<br><code>async: false</code>, 默认是<code>true</code></p><p>代码见：<a href="https://github.com/upeng/learn-vuejs" target="_blank" rel="external">github</a><br>demo页：<img src="https://raw.githubusercontent.com/upeng/upeng.github.io/master/image/vuedemo.png" alt="demo"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vuejs是MVVM框架，数据和DOM视图双向绑定，数据驱动的 web 界面的库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应的数据绑定&lt;/strong&gt;：数据与DOM保持同步非常简单，数据发生变化的时候，如果我们使用JQuery操作DOM的话自然是可行的，但是jQuery操作DOM代码复杂容易出错，就拿一个简单的例子，在列表中新增一行数据，使用JQuery可能会刷新整个DOM,并对页面refresh。但是vue实现数据与DOM的绑定后，只要数据发生变化，就自动改动DOM，所以我们的工作重点就是修改数据，不必与DOM更新搅在一起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的理解&lt;/strong&gt;：Vuejs简化了操作DOM或者不再去手动操作DOM，一个简单的API就搞定了DOM的自动更新，让我们脱离了使用Js操作DOM的复杂流程。这也是Vue的迷人之处吧，其他的优点诸如：组件化、模块化、体积小等优点我就不再罗列了，本文重点也不在此。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://upeng.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuejs" scheme="https://upeng.github.io/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>vagrant-快速搭建linux开发环境</title>
    <link href="https://upeng.github.io/blog/2016/07/13/vagrant/"/>
    <id>https://upeng.github.io/blog/2016/07/13/vagrant/</id>
    <published>2016-07-13T15:32:54.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时开发测试使用公司提供的弹性开发机（Centos），自己想折腾一些东西又不方面在上面部署,鉴于</p><ul><li>学习linux考虑（比如经常装扩展插件啥的），装WAMP有些low而且不适合扩展。</li><li>在windows上装linux虚拟机（VMare等）又太占内存（o(╯□╰)o我的笔记本只有4G内存。。。）</li></ul><p>有没有那种快捷的搭建linux开发环境的东东呢？答案是肯定的。偶然间发现了vagrant，它就像一个容器一样（Docker？），部署LAMP十分快捷；<br><a id="more"></a></p><h2 id="我所理解的vagrant-box"><a href="#我所理解的vagrant-box" class="headerlink" title="我所理解的vagrant box"></a>我所理解的vagrant box</h2><p>我理解的，vagrant box就是一个简易linux操作系统内核，到vagrant官网可以看到很多【<a href="http://www.vagrantbox.es/】，" target="_blank" rel="external">http://www.vagrantbox.es/】，</a> 选择一个box下载下来，然后通过vagrant add box就可以直接初始化一个linux系统了；如果你想创建多个linux系统，那就多add 几个，所以vagrant也可以练习分布式！但是，这个网站的速度也慢的可以，推荐一个国内镜像，还是挺快的，每秒20M左右 【<a href="http://mirrors.hypo.cn/ubuntu-vagrant/】" target="_blank" rel="external">http://mirrors.hypo.cn/ubuntu-vagrant/】</a></p><h2 id="预备软件"><a href="#预备软件" class="headerlink" title="预备软件"></a>预备软件</h2><p>virtualBox : 运行linux的环境 【<a href="https://www.vagrantup.com/】" target="_blank" rel="external">https://www.vagrantup.com/】</a><br>vagrant：提供一些vagrant命令 【<a href="https://www.virtualbox.org/】" target="_blank" rel="external">https://www.virtualbox.org/】</a><br>百度云盘备份：【<a href="http://pan.baidu.com/s/1o8aoofo】" target="_blank" rel="external">http://pan.baidu.com/s/1o8aoofo】</a></p><h2 id="vagrant-box下载"><a href="#vagrant-box下载" class="headerlink" title="vagrant box下载"></a>vagrant box下载</h2><p>记得第一次是“在线”下载vagrant box，执行vagrant init；vagrant up之后，当检测到无box时会自动下载；速度慢的惊人（虽然我开了vpn），而且在线安装的box直接就在我们vagrant up命令中执行了，没有见到box后缀的文件，当你重装系统后或者你安装的vagrant损坏后，难道又要重新在线安装box？ +_+ 所以建议下载box文件，然后使用vagrant add box命令</p><h2 id="vagrant-常用命令-快速搭建LAMP流程"><a href="#vagrant-常用命令-快速搭建LAMP流程" class="headerlink" title="vagrant 常用命令(快速搭建LAMP流程)"></a>vagrant 常用命令(快速搭建LAMP流程)</h2><h3 id="添加box"><a href="#添加box" class="headerlink" title="添加box"></a>添加box</h3><p>vargant box add  trusty  trusty-server-cloudimg-amd64-vagrant-disk1.box<br>// vagrant box add  box默认名称是base,此处我们定义为trusty  .box文件就是我们下载的box</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>vagrant init<br>因为我们重新命名了我们的box为trusty，所以你再任何地方只要执行vagrant init，生成的Vagrant文件中config.vm.box=’trusty’；<br>如果执行vagrant up会失败，因为vagrant init默认以base为名初始化；正确的初始化姿势是<br>vagrant init trusty</p><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><p>vargant up<br>vagrant up之前需要将Vagrant文件的第25行注释去掉，这样才能在windows中访问我们在linux中创建的程序；在trusty版本的Ubuntu中，有个目录 <code>/vagrant</code>与本地windows中Vagrant同级，因此可以本地编辑，linux中运行，就像磁盘映射。</p><h3 id="登录虚拟机"><a href="#登录虚拟机" class="headerlink" title="登录虚拟机"></a>登录虚拟机</h3><p>vagrant ssh<br>使用vagrant ssh进入Ubuntu系统；进入后需要更新升级Ubuntu的一些包和工具，同事需要安装我们的LAMP。<br>升级包命令： <code>sudo apt-get update</code><br>安装php apache: <code>sudo apt-get install apache2 php5 libapache2-mod-php5</code><br>安装mysql: <code>sudo apt-get install mysql-server mysql-client php5-mysql</code></p><h3 id="配置apache2"><a href="#配置apache2" class="headerlink" title="配置apache2"></a>配置apache2</h3><p>安装完成后访问：<code>http://localhost:8080</code> , 默认指向 <code>/var/www/html</code> ,修改配置文件如下：<br>配置文件路径  <code>/etc/apache2/sites-available/000-default.conf</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /vagrant</div><div class="line"><span class="section">&lt;Directory /vagrant&gt;</span></div><div class="line">                <span class="attribute"><span class="nomarkup">Options</span></span> -Indexes +followSymLinks +MultiViews</div><div class="line">                <span class="attribute">AllowOverride</span> <span class="literal">all</span></div><div class="line">                <span class="attribute">Require</span> <span class="literal">all</span> granted</div><div class="line"><span class="section">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure><p>修改完成后重启apache <code>service apache2 restart</code></p><p>参考：<br><a href="http://rrylee.github.io/2015/11/26/quick-start-linux-php/" target="_blank" rel="external">http://rrylee.github.io/2015/11/26/quick-start-linux-php/</a><br><a href="http://rmingwang.com/vagrant-commands-and-config.html" target="_blank" rel="external">http://rmingwang.com/vagrant-commands-and-config.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时开发测试使用公司提供的弹性开发机（Centos），自己想折腾一些东西又不方面在上面部署,鉴于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习linux考虑（比如经常装扩展插件啥的），装WAMP有些low而且不适合扩展。&lt;/li&gt;
&lt;li&gt;在windows上装linux虚拟机（VMare等）又太占内存（o(╯□╰)o我的笔记本只有4G内存。。。）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有没有那种快捷的搭建linux开发环境的东东呢？答案是肯定的。偶然间发现了vagrant，它就像一个容器一样（Docker？），部署LAMP十分快捷；&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://upeng.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="vagrant" scheme="https://upeng.github.io/blog/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>MCQ学习笔记</title>
    <link href="https://upeng.github.io/blog/2016/07/11/memcacheq/"/>
    <id>https://upeng.github.io/blog/2016/07/11/memcacheq/</id>
    <published>2016-07-11T15:29:55.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>初次接触MCQ源于蓝v，之前也听同事说微博的消息推送也是使用MCQ。认识MCQ之前感觉它很神秘，用之后才发现并也不过如此，所以很多知识不能只凭想象或者言传，需要自身实践才可知晓。这里想记录一下自己使用MCQ的过程，以及MCQ的使用场景、优缺点等等。</p><blockquote><p>MemcacheQ - Simple Queue Service over Memcache<br>在memcache基础上的简单队列服务，所以它兼具memcache和队列的特点。</p></blockquote><a id="more"></a><h2 id="Features-特性"><a href="#Features-特性" class="headerlink" title="Features[特性]"></a>Features[特性]</h2><ul><li>damn simple（炒鸡简单)</li><li>very fast（非常快）-&gt; 给予memcache,在内存中操作</li><li>multiple queue（多队列)</li><li>concurrent well（并发good)</li><li>memcache protocol compatible（兼容memcache协议)</li></ul><p>memcacheq(MCQ)是轻量级的消息队列，依赖于Berkeley DB和libevent。Berkeley DB用于持久化存储队列数据，避免MCQ宕机数据丢失。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><p>高并发，数据可以弱一致性（弱一致性？）。</p></blockquote><p>蓝v后台沿用之前橙v逻辑（数据量大，并发高），也使用了MCQ。在高并发，大数据量的情况下，请求过多会发生阻塞，试想，在这种情况下，如果大量请求同时对mysql进行增删改，则会产生很大行锁（InnoDB）或表锁（Myisam）;请求堆积过多还可能会出现too many connections的错误。使用了MCQ，可以异步处理，怎么异步法？请求在不断的往队列塞（入队列），队列也不断地去消费这些请求（出队列），当然消费能力也是在mysql能力范围之内的，为啥？【思考缓冲作用】二者就处于异步状态。</p><p>支持多队列，比如我们创建了队列A，B，C，他们可以同时工作，其实这也体现了并发异步的特性。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>因为MCQ是基于memcached开发，所以可以使用memcached的命令对它进行各种操作；客户端比如php可以像操作memcacheq那样操作MCQ</p><h3 id="启动MCQ"><a href="#启动MCQ" class="headerlink" title="启动MCQ"></a>启动MCQ</h3><p><code>/usr/local/memcacheq/bin/memcacheq -d -r 1024 -l 127.0.0.1 -p 22201 -u root</code></p><p><strong>参数说明</strong><br><code>-d</code> 以守护进程方式运行<br><code>-r</code> 最大化核心文件限制<br><code>-l</code> 监听网卡<br><code>-p</code> TCP监听端口<br><code>-u</code> 以（root）身份运行</p><h3 id="最常用的mcq命令：set和get"><a href="#最常用的mcq命令：set和get" class="headerlink" title="最常用的mcq命令：set和get"></a>最常用的mcq命令：set和get</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">22201</span> ....</div><div class="line"></div><div class="line">set testqueue <span class="number">0</span> <span class="number">0</span> <span class="number">3</span>    <span class="comment">//队列添加一条消息</span></div><div class="line">xxx</div><div class="line">STORED</div><div class="line"></div><div class="line">set testqueue <span class="number">0</span> <span class="number">0</span> <span class="number">5</span></div><div class="line">xxxxx</div><div class="line">STORED</div><div class="line"></div><div class="line">stats queue</div><div class="line">STAT testqueue <span class="number">2</span>/<span class="number">0</span></div><div class="line"></div><div class="line">get testqueue</div><div class="line">VALUE testqueue <span class="number">0</span> <span class="number">3</span></div><div class="line">xxx</div><div class="line">END</div><div class="line"></div><div class="line">stats queue</div><div class="line">STAT testqueue <span class="number">2</span>/<span class="number">1</span></div></pre></td></tr></table></figure><p><strong>注意</strong>：mcq没有expire time这个标记，是因为mcq支持数据持久化（Berkeley DB）。另外mcq存储长度length有限制（蓝v踩到的坑），之前同步前台用户认证申请材料至后台，因为材料增多，导致参数长度增加，超过了mcq的消息长度的限制：limit ? 后面分析查明</p><blockquote><p>MCQ和Redis的比较</p></blockquote><p><strong>memcacheq</strong></p><ul><li>数据保存在内存中，速度快</li><li>支持数据持久化</li><li>队列长度限制小</li><li>与memcache兼容</li><li>与memcached是两个独立服务，如同时使用需要分别安装</li></ul><p><strong>Redis</strong></p><ul><li>数据保存在内存中，速度快</li><li>支持数据持久化</li><li>队列长度限制小</li><li>支持多种数据类型</li><li>同时可以做为缓存来使用</li></ul><p>自己思考一下，在项目中MCQ和Redis各自的使用场景</p><p>后续阅读文章<br><a href="https://www.ibm.com/developerworks/cn/linux/l-ipc/" target="_blank" rel="external">深刻理解Linux进程间通信（IPC）</a><br><a href="http://blog.buaa.us/talk-about-mq/" target="_blank" rel="external">可靠消息队列浅谈</a><br><a href="http://www.fireflies.me/tag/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/" target="_blank" rel="external">MemcacheQ分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初次接触MCQ源于蓝v，之前也听同事说微博的消息推送也是使用MCQ。认识MCQ之前感觉它很神秘，用之后才发现并也不过如此，所以很多知识不能只凭想象或者言传，需要自身实践才可知晓。这里想记录一下自己使用MCQ的过程，以及MCQ的使用场景、优缺点等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MemcacheQ - Simple Queue Service over Memcache&lt;br&gt;在memcache基础上的简单队列服务，所以它兼具memcache和队列的特点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其他" scheme="https://upeng.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="memcacheq" scheme="https://upeng.github.io/blog/tags/memcacheq/"/>
    
  </entry>
  
  <entry>
    <title>使用zephir快速编写php扩展</title>
    <link href="https://upeng.github.io/blog/2016/06/30/zephir/"/>
    <id>https://upeng.github.io/blog/2016/06/30/zephir/</id>
    <published>2016-06-30T15:42:24.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zephir简介"><a href="#zephir简介" class="headerlink" title="zephir简介"></a>zephir简介</h2><p><a href="http://zephir-lang.com/" target="_blank" rel="external">zephir</a>开源，是<code>zend engine / php / intermediate</code>的缩写，其语法和php很相似，所以对于phper而言创建php扩展简单快捷。如果你不想使用C编写php扩展，可以考虑zephir，因为它很简单，学习成本低。<br><a id="more"></a></p><h2 id="zephir特点"><a href="#zephir特点" class="headerlink" title="zephir特点"></a>zephir特点</h2><p><code>dynamic/static</code> 变量类型可以是动态/静态变量<br><code>pointers or direct memory management aren’t allowed</code>不允许指针和直接的内存管理<br><code>ahead of time</code> 编译模型AOT<br><code>task-local garbage collection</code> 内存模型 Task-Local垃圾回收</p><blockquote><p>下面就以一个简单扩展开发为例，总结使用zephir开发php来扩展的流程！</p></blockquote><h2 id="安装zephir"><a href="#安装zephir" class="headerlink" title="安装zephir"></a>安装zephir</h2><ol><li>需要先安装相关的依赖</li><li>使用git的方式获取源代码进行安装</li><li>通过运行zephir命令验证安装是否成功<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git clone <span class="string">https:</span><span class="comment">//github.com/phalcon/zephir</span></div><div class="line">$ cd zephir</div><div class="line">$ ./install-json</div><div class="line">$ zephir help</div><div class="line"> _____              __    _</div><div class="line"><span class="regexp">/__  /</span>  ___  ____  <span class="regexp">/ /</span>_  (_)____</div><div class="line">  <span class="regexp">/ /</span>  <span class="regexp">/ _ \/</span> __ \<span class="regexp">/ __ \/</span> <span class="regexp">/ ___/</span></div><div class="line"> <span class="regexp">/ /</span>__<span class="regexp">/  __/</span> <span class="regexp">/_/</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span></div><div class="line"><span class="regexp">/____/\_</span>__<span class="regexp">/ .___/</span>_<span class="regexp">/ /</span>_<span class="regexp">/_/</span>_/</div><div class="line">         <span class="regexp">/_/</span></div><div class="line">Zephir version <span class="number">0.7</span><span class="number">.1</span>b</div></pre></td></tr></table></figure></li></ol><h2 id="初始化扩展"><a href="#初始化扩展" class="headerlink" title="初始化扩展"></a>初始化扩展</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">zephir init upfriend(<span class="name">upfriend</span>扩展名)</div><div class="line">upfriend/</div><div class="line">   ext/</div><div class="line">   upfriend/</div></pre></td></tr></table></figure><h2 id="编写扩展"><a href="#编写扩展" class="headerlink" title="编写扩展"></a>编写扩展</h2><p>在<code>upfriend/upfriend</code>目录中创建<code>filter.zep</code>文件</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">Upfriend</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">/**     </span></div><div class="line"><span class="comment">    * Filters a string returning its alpha characters</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> string str     </span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alpha</span><span class="params">(string str)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">char</span> ch; string filtered = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ch in str &#123;</div><div class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) || (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>)</div><div class="line">            &#123;</div><div class="line">              <span class="keyword">let</span> filtered .= ch;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> filtered;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"hello zephir"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编译扩展"><a href="#编译扩展" class="headerlink" title="编译扩展"></a>编译扩展</h2><p><code>upfriend</code>根目录运行<code>zephir bulid</code>编译扩展<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> zephir build     </div><div class="line"><span class="function"><span class="title">Preparing</span></span> <span class="keyword">for</span> PHP compilation...</div><div class="line"><span class="function"><span class="title">Preparing</span></span> configuration <span class="keyword">file</span>...</div><div class="line"><span class="function"><span class="title">Compiling</span></span>...</div><div class="line"><span class="function"><span class="title">Installing</span></span>...</div><div class="line">Extension installed!</div><div class="line">Add extension=utils.so to your php.ini</div><div class="line">Don<span class="string">'t forget to restart your web serverp</span></div></pre></td></tr></table></figure></p><h2 id="使用扩展"><a href="#使用扩展" class="headerlink" title="使用扩展"></a>使用扩展</h2><p>编译成功，修改php.ini配置文件，添加一行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">extension=upfirend<span class="selector-class">.so</span> <span class="comment">//upfriend.so与php.ini位于同一目录</span></div><div class="line">php -m  <span class="comment">//查看扩展是否安装成功</span></div></pre></td></tr></table></figure></p><p>在php中使用这个类（扩展）的方法<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php">    $filter = <span class="keyword">new</span> Upfriend\Filter();</span></div><div class="line"><span class="php">    <span class="keyword">echo</span> $filter-&gt;alpha(<span class="string">"01he#l.lo?/1"</span>); <span class="comment">// prints hello</span></span></div><div class="line"><span class="php">    Upfriend::hello() <span class="comment">// prints hello zephir</span></span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zephir简介&quot;&gt;&lt;a href=&quot;#zephir简介&quot; class=&quot;headerlink&quot; title=&quot;zephir简介&quot;&gt;&lt;/a&gt;zephir简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://zephir-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zephir&lt;/a&gt;开源，是&lt;code&gt;zend engine / php / intermediate&lt;/code&gt;的缩写，其语法和php很相似，所以对于phper而言创建php扩展简单快捷。如果你不想使用C编写php扩展，可以考虑zephir，因为它很简单，学习成本低。&lt;br&gt;
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="zephir" scheme="https://upeng.github.io/blog/tags/zephir/"/>
    
  </entry>
  
  <entry>
    <title>数据库范式的思考</title>
    <link href="https://upeng.github.io/blog/2016/06/25/normal/"/>
    <id>https://upeng.github.io/blog/2016/06/25/normal/</id>
    <published>2016-06-25T08:32:12.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>还记得第一本数据库教程《数据库系统概论》，从最初的范式讲起，只记得当时学的还模模糊糊，今天又看到类似的文章【从范式谈起-余晟】，粗略总结一下数据库范式，也是加深一下记忆吧！在这之前，说下我对关系型数据库管理系统RDBMS和NOSQL的理解：RDBMS主要突出其R(Relation)关系；而NoSQL如：常见的MC、Redis、MongoDB，支持key-value型等简单的数据类型，适用于大数据时代的很多场景，为开发提供了巨大便利；使用场景不同，各有千秋。<br><a id="more"></a><br>数据库范式，简单的说就是<strong>规范化，在不丢失数据的情况下，把表拆分成更小、冗余度更小的表，通过不同表之间的外键用链接join方式得到需求数据</strong>，范式NF可以粗略的理解为一张数据表的表结构所符合的某种设计标准的级别，数据库范式也分为1NF，2NF，3NF，BCNF，4NF，5NF。</p><p><strong>通常一张表满足了第三范式，就认为这个表是规范化的，增删改查不会出现异常。</strong></p><h3 id="第一范式：属性不可拆分"><a href="#第一范式：属性不可拆分" class="headerlink" title="第一范式：属性不可拆分"></a>第一范式：属性不可拆分</h3><p>即表中的任何列（属性）都应当是承载信息的最小单位，不可再分；<br><em>1NF是所有关系型数据库的最基本要求</em></p><h3 id="第二范式：主键必须最小"><a href="#第二范式：主键必须最小" class="headerlink" title="第二范式：主键必须最小"></a>第二范式：主键必须最小</h3><p>即：在满足第一范式的基础上，所有非主属性必须完全依赖于主键，而且不能依赖于主键的某个子集<br><img src="http://upeng.github.io/image/table1.png" alt="表格"><br>主键：（学号，课名），系主任通过学号就可以确定；上表不满足2NF</p><blockquote><p>如何判断是否符合2NF？</p></blockquote><ul><li>第一步：找出数据表中所有的码。</li><li>第二步：根据第一步所得到的码，找出所有的主属性。</li><li>第三步：数据表中，除去所有的主属性，剩下的就都是非主属性了。</li><li>第四步：查看是否存在非主属性对码的部分函数依赖。</li></ul><p><em>2NF在1NF的基础之上，消除了非主属性对于码的部分函数依赖</em></p><h3 id="第三范式（3NF）：主键必须直接依赖，不能传递依赖"><a href="#第三范式（3NF）：主键必须直接依赖，不能传递依赖" class="headerlink" title="第三范式（3NF）：主键必须直接依赖，不能传递依赖"></a>第三范式（3NF）：主键必须直接依赖，不能传递依赖</h3><p><img src="http://upeng.github.io/image/table2.png" alt="表格"><br>上图表1符合3NF<br>上图表2主键是学号，其他3个是非主属性，学号-&gt;系名，系名-&gt;系主任；存在传递依赖，故表2不满足3NF<br><em>3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖</em>。</p><p>更深入的理解：<a href="https://www.zhihu.com/question/24696366" target="_blank" rel="external">知乎</a> ，注：文中图片均来源于此</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得第一本数据库教程《数据库系统概论》，从最初的范式讲起，只记得当时学的还模模糊糊，今天又看到类似的文章【从范式谈起-余晟】，粗略总结一下数据库范式，也是加深一下记忆吧！在这之前，说下我对关系型数据库管理系统RDBMS和NOSQL的理解：RDBMS主要突出其R(Relation)关系；而NoSQL如：常见的MC、Redis、MongoDB，支持key-value型等简单的数据类型，适用于大数据时代的很多场景，为开发提供了巨大便利；使用场景不同，各有千秋。&lt;br&gt;
    
    </summary>
    
      <category term="数据库范式" scheme="https://upeng.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/"/>
    
    
      <category term="MySQL" scheme="https://upeng.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>In Recent Days</title>
    <link href="https://upeng.github.io/blog/2016/06/17/thinking-1/"/>
    <id>https://upeng.github.io/blog/2016/06/17/thinking-1/</id>
    <published>2016-06-16T18:07:38.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我想吐糟一下为知笔记；我写了这么久，保存一下就丢了？丢了？发现最近为知还炒鸡慢，算了还是用Evernote吧，相对而言更靠谱（虽然不支持markdown格式）<br><a id="more"></a><br>最近忙的没有规律，蓝v后台一直在处理零星bug，但是对蓝v心里不是很踏实；目前为知，对做蓝v后台有几点体会</p><ul><li>代码结构混乱，一个函数能有几百行，变量超级多，定位问题很困难；不同的页面使用同一个Controller和view，然后在里面做各种复杂的判断逻辑，代码辣眼睛！</li><li>代码逻辑混乱，队列夹杂着数据库、调前台、平台接口同步数据；接口调的特隐晦，后台自己操作数据库要先入队列，然后通过脚本读队列操作数据库；其实量真没那么大！</li><li>主观方面自己心不静，看到代码复杂心情就不好了，为了能够实现功能就又开始堆代码了，心情很复杂，想重构又无从下手！</li></ul><p>先说下自己这半个月来的学习进度；月初和校长约定要学习这些东西：</p><ul><li>mysql分库分表、主从复制同步；</li><li>laravel和EPF的比较</li><li>swoole的学习</li></ul><p>这个月已经过半，直到今天才写了这个文章，并不是说这半个月没有学，相反，几乎天天都在学，地铁上班和回去的路上，中午有时候午休前也会看；但是没有总结，没有思考，只是机械的装载知识，并没有多少收获；下午和校长谈话，校长给了很中肯的意见，说的很多地方都是我目前遇到的问题；总结这半个月，我也看了很多东西：laravel、vuejs、swoole。但都只是停留在表面，没有深入！我觉得校长说的很对，学习的时候要有个主线，沿着这个主线深入学习，遇到与主线相关的问题，就深入学习搞定它；与主线无关就先getpocket，或者收藏起来；等主线相关的内容都搞明白搞清楚后，再去搞定你pocket里的另一个主线。想想这半个月以来的学习状态，我不禁要批评自己了，偏离主线的方向有点远了！</p><p>今天看到了<a href="http://xiaolai.li" target="_blank" rel="external">xiaolai</a>老师的文章，他说道：真正的工程师，时间分配大抵上是这样的，80% 的时间用来思考，20% 的时间把思考结果用代码表达出来，这个思考的过程包括反复搜索(search 多了，就叫 research)，深入阅读各种文档（因为今天的工程师必定要用到大量别人写好的模块），还要思考自己写出来的代码如何写好文档才能让更多的人使用……而刚入门的时候，可能是反过来的，80%的时间用来写代码，没有思想可以表达，就去模仿表达别人的思想…… 但，一定要有 20% 的时间花在真正的思考上，像工程师一样思考。<strong>很多人进步慢的根本原因在于，每天都在“学”，但从来不花大块的时间深入“想”。而我这半个月就是这种状态：每天都在学，但是没有花时间思考！</strong></p><p>另外我在学习的时候有个问题，比如在学laravel和vuejs的时候，我总想把文档一次性看完，然后再去操作；其实这犯了学习大忌，就像xiaolai老师说的</p><blockquote><p>真实的学习过程是，学会一点最少必要知识（就是那些知道了之后就可以马上开始行动了的最少知识），然后就要马上开始实际操练…… 最终，大量的细节都是在实际操作过程中进一步学会的 —— 甚至，还有大量的细节如果不进行实际操练的话，就根本没机会学得到。</p></blockquote><p>这半个月来：</p><ul><li>思考的少，机械师忘脑袋装知识，只讲数量不讲质量，仅仅停留在表面</li><li>总结的少，有点偏离主线</li></ul><p>后面要做的就是纠正这些学习上的毛病，一专而多精，看一个文章就要认真看，看懂！不能匆匆而过，看完要思考是什么？为什么？怎么做的？再针对这类问题做个总结，如果自己遇到这类问题你该怎么做，ok，fighting!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我想吐糟一下为知笔记；我写了这么久，保存一下就丢了？丢了？发现最近为知还炒鸡慢，算了还是用Evernote吧，相对而言更靠谱（虽然不支持markdown格式）&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://upeng.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="thinking" scheme="https://upeng.github.io/blog/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>standing on the shoulders of the giants</title>
    <link href="https://upeng.github.io/blog/2016/05/29/thinking/"/>
    <id>https://upeng.github.io/blog/2016/05/29/thinking/</id>
    <published>2016-05-29T11:18:09.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>It’s never too <strong>late</strong> to learn !</p></blockquote><p>周末学习laravel，然后写了一篇关于laravel认证相关的学习总结。写完后google类似的文章，意外发现了一个同学（不认识），<a href="http://aevit.xyz/" target="_blank" rel="external">博主</a>华师的，通过他的文章找到了他的github，然后一发不可收拾。<br><a id="more"></a></p><p>果然github真是一个全球最大的男性交友社区^_^，你会无意间发现很多大牛，发现他们的作品，他们的学习经历，现在看来买个vpn还是很值得的，程序员真要远离百度搜索。看见这些同学的博客，心里有种说不出的感觉，他们有的还在学校，没有毕业，惭愧啊！！当年自己本科都干了什么啊，真是。。。。他们已经在github上公开了自己的很多项目，而且励志成为full stack！自己发布了一些视频，很精美，称他们为全栈工程师一点也不过分！</p><p>看他人的学习成长过程，感到很惭愧，也很懊悔，不过我相信一切都还来得及，我还年轻，嗯，我还很年轻！O(∩_∩)O~</p><p>从他们的文章或者视频中能发现很多<strong>便捷高效的工具</strong>和<strong>学习技巧</strong>，我还记得去年刚入职通关答辩的时候，几位leader给我说的话</p><ul><li>对新技术的敏感度-保持不断学习的态度&amp;多思考</li><li>代码的规范-逻辑检查&amp;多看代码</li></ul><p>多点一下你可能就会有意外的收获，没人会去手把手教你，而且你已经工作了一年了，如果总结的话，你有什么拿得出手的东西吗？~(&gt;_&lt;)~<br><!-- more --><br>今天早上看到晗姐（annalihan）的github时又无意间看到吴大师的github，大师写了一篇关于<a href="https://github.com/kumawu/blog/blob/master/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%B8%80%E6%AC%A1%E6%99%8B%E5%8D%87%E5%87%86%E5%A4%87.md" target="_blank" rel="external">如何做好一次晋升准备</a>，瞬间无语了，努力吧少年！多积累多总结，多思考多发现！多看博客的<code>about</code>和<code>links</code>,你会发现很多彩蛋！</p><p>附上今天看到的一些大牛的（我眼中的）博客，后续抽时间多看看，fighting！</p><p><a href="http://aevit.xyz/2016/05/11/laravel-learning-2/#more" target="_blank" rel="external">学习啦</a><br><a href="http://zh.learnlayout.com/" target="_blank" rel="external">学习css布局-aevit文章中提到</a><br><a href="http://rrytip.github.io/" target="_blank" rel="external">博客不错-绝对干货</a><br><a href="http://www.miaoyueyue.com/archives/452.html" target="_blank" rel="external">在sublime中运行php</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;It’s never too &lt;strong&gt;late&lt;/strong&gt; to learn !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;周末学习laravel，然后写了一篇关于laravel认证相关的学习总结。写完后google类似的文章，意外发现了一个同学（不认识），&lt;a href=&quot;http://aevit.xyz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博主&lt;/a&gt;华师的，通过他的文章找到了他的github，然后一发不可收拾。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://upeng.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="thinking" scheme="https://upeng.github.io/blog/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>laravel学习笔记-用户认证</title>
    <link href="https://upeng.github.io/blog/2016/05/29/laravel-auth/"/>
    <id>https://upeng.github.io/blog/2016/05/29/laravel-auth/</id>
    <published>2016-05-29T00:17:07.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在平时开发过程中，用户登录注册是非常常见的场景，比如大部分后台管理、论坛等等；用户一般web访问流程从业务来说是这样的：<br><a id="more"></a></p><ol><li>注册</li><li>登录</li><li>进入首页</li><li>查看&amp;操作</li><li>退出登录</li></ol><p>很多时候为了实现1、2、5这部分功能，重复造了很多轮子。目前接触到的laravel，就避免了你重复造轮子的问题，下面结合自己在laravelacademy上学习的laravel认证这部分做一下记录和总结，我学习的思路大致上是先学会用，然后搞清楚原理；所以这篇blog先记录如何使用的，快速实现function，尽管写的很low，但是给自己看，最关键的是是一个温习的过程，fighting！</p><p>laravel认证【插件】做了什么？</p><ul><li>注册</li><li>登录</li><li>找回密码（这都帮忙做好了^_^）</li></ul><h3 id="数据库表准备"><a href="#数据库表准备" class="headerlink" title="数据库表准备"></a>数据库表准备</h3><p>注册其实是入库的过程，也就是说，你需要有一个表专门用以存储注册用户的信息，laravel的<code>migration</code>已经自动创建了<code>users</code>和<code>password_resets</code>建表语句，只需<code>php artisan migrate</code>即可创建2张表到数据库；况且Model层已经创建了<code>User.php</code><br><!-- more --></p><h3 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 认证路由...</span></div><div class="line">Route::get(<span class="string">'auth/login'</span>, <span class="string">'Auth\AuthController@getLogin'</span>);</div><div class="line">Route::post(<span class="string">'auth/login'</span>, <span class="string">'Auth\AuthController@postLogin'</span>);</div><div class="line">Route::get(<span class="string">'auth/logout'</span>, <span class="string">'Auth\AuthController@getLogout'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 注册路由...</span></div><div class="line">Route::get(<span class="string">'auth/register'</span>, <span class="string">'Auth\AuthController@getRegister'</span>);</div><div class="line">Route::post(<span class="string">'auth/register'</span>, <span class="string">'Auth\AuthController@postRegister'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 发送密码重置链接路由</span></div><div class="line">Route::get(<span class="string">'password/email'</span>, <span class="string">'Auth\PasswordController@getEmail'</span>);</div><div class="line">Route::post(<span class="string">'password/email'</span>, <span class="string">'Auth\PasswordController@postEmail'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 密码重置路由</span></div><div class="line">Route::get(<span class="string">'password/reset/&#123;token&#125;'</span>, <span class="string">'Auth\PasswordController@getReset'</span>);</div><div class="line">Route::post(<span class="string">'password/reset'</span>, <span class="string">'Auth\PasswordController@postReset'</span>);</div><div class="line"></div><div class="line"><span class="comment">//成功认证后网站首页</span></div><div class="line">Route::get(<span class="string">'/'</span>, <span class="string">'UserController@index'</span>);</div></pre></td></tr></table></figure><p>你会发现<code>AuthController</code>没有<code>getLogin、postLogin</code>这些方法，这里需要说明一下<a href="http://php.net/manual/zh/language.oop5.traits.php" target="_blank" rel="external">trait</a>官方手册讲述的已经很清楚，顺便学习一下overtrue的这篇文章<a href="http://overtrue.me/articles/2016/04/about-php-trait.html" target="_blank" rel="external">我所理解的 PHP Trait</a>，所以如果想知道auth怎么操作数据库，又是如何加载视图，做何种跳转，深入trait层去看代码就好。</p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>laravel已经创建好了auth控制器，位于<code>Controllers/Auth/</code>下，而且中间件也都默认创建，基本的准备工作已经做足，只需你创建view，做一些简单的设置就可以使用了</p><h4 id="部分属性设置"><a href="#部分属性设置" class="headerlink" title="部分属性设置"></a>部分属性设置</h4><p>注册登录和密码重置的路由入口都在<code>Controllers/Auth/</code>下的<code>AuthController.php</code>和<code>PasswordController.php</code>,他们都是用了<code>trait</code><br>如果你在控制器中没有定义一些path，<code>trait</code>底层都会使用自己定义的默认值，如果你喜欢这个默认值，你就按照他来写你的<code>route.php</code>吧，这里我们可以自己定义，覆盖<code>trait</code>中的这部分属性；如果不知道属性名称，进入<code>trait</code>查看</p><blockquote><p>eg:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//in AuthController.php</span></div><div class="line"><span class="keyword">protected</span> $redirectPath = <span class="string">'/'</span>;  <span class="comment">//登录或注册成功进入首页，默认是/home</span></div><div class="line"><span class="keyword">protected</span> $redirectAfterLogout = <span class="string">'/auth/login'</span>; <span class="comment">//退出登录后跳转到登录页</span></div><div class="line"></div><div class="line"><span class="comment">//in PasswordController.php</span></div><div class="line"><span class="keyword">protected</span> $redirectPath = <span class="string">'/'</span>;  <span class="comment">//密码重置成功后跳转</span></div><div class="line"><span class="keyword">protected</span> $subject = <span class="string">'点击此处重置密码：'</span>;  <span class="comment">//邮件内容</span></div></pre></td></tr></table></figure></p></blockquote><h4 id="发挥认证作用"><a href="#发挥认证作用" class="headerlink" title="发挥认证作用"></a>发挥认证作用</h4><p>比如在登录成功后跳转的路由’/‘，我们在<code>UserController</code>中怎么确定用户是否登录，如果没有登录怎么让用户成功登录后callback到其输入的地址；<strong>auth中间件开始发挥其作用了</strong>，所谓中间件，从字面上理解就是在用户访问该页面前，先去执行中间件内容。其实在Auth中也使用了中间件guest;在UserController中加入下面这个构造函数，即可让用户先登录再访问。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php"></span></div><div class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span></div><div class="line"><span class="php"></span></div><div class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></div><div class="line"><span class="php"></span></div><div class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span></div><div class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span></div><div class="line"><span class="php"></span></div><div class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></div><div class="line"><span class="php">&#123;</span></div><div class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></div><div class="line"><span class="php">    &#123;</span></div><div class="line"><span class="php">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>);</span></div><div class="line"><span class="php">    &#125;</span></div><div class="line">    /**</div><div class="line">     * Display a listing of the resource.</div><div class="line">     *</div><div class="line">     * @return \Illuminate\Http\Response</div><div class="line"><span class="php">     */</span></div><div class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span></span></div><div class="line"><span class="php">    &#123;</span></div><div class="line"><span class="php">        $user = $request-&gt;user();</span></div><div class="line"><span class="php">        <span class="keyword">echo</span> $user[<span class="string">'name'</span>] . <span class="string">'登录成功！'</span>;</span></div><div class="line"><span class="php">    &#125;</span></div><div class="line"><span class="php">&#125;</span></div></pre></td></tr></table></figure></p><h3 id="发散"><a href="#发散" class="headerlink" title="发散"></a>发散</h3><h4 id="关于模板"><a href="#关于模板" class="headerlink" title="关于模板"></a>关于模板</h4><p>使用Form表单类，加上bootstrap打造属于自己的登录注册界面，模板文件名源于trait中定义的view，当然我们可以重写getLogin等方法，因为它们有的简单到只有一个<code>return veiw(*.blade.php)</code><br>主要创建以下模板：<a href="https://github.com/upeng/learn-laravel" target="_blank" rel="external">详细页面</a></p><ul><li>register.blade.php</li><li>login.blade.php</li><li>password.blade.php</li><li>reset.blade.php</li></ul><h4 id="关于设置session"><a href="#关于设置session" class="headerlink" title="关于设置session"></a>关于设置session</h4><p>我们常见的登录登出按钮，重置密码，获取当前登录用户的基本信息等等。开始搞起吧！<br>后面仔细研究源码，从根本上掌握auth认真的全流程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时开发过程中，用户登录注册是非常常见的场景，比如大部分后台管理、论坛等等；用户一般web访问流程从业务来说是这样的：&lt;br&gt;
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://upeng.github.io/blog/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>几个值得深思的 PHP 面试问题</title>
    <link href="https://upeng.github.io/blog/2016/05/28/php-detail/"/>
    <id>https://upeng.github.io/blog/2016/05/28/php-detail/</id>
    <published>2016-05-27T16:04:26.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>5个值得深思的 PHP 面试问题<br>文章所罗列的问题虽然看似简单，但是每个背后都涵盖了一个或几个大家容易忽视的基础知识点，希望能够帮助到你的面试和平时工作。<br><a id="more"></a><br><strong>Q1</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$str1</span> = <span class="string">'hello world'</span>;</div><div class="line"><span class="variable">$str2</span> = <span class="string">'he'</span>;</div><div class="line"><span class="keyword">if</span> (strpos(<span class="variable">$str1</span>, <span class="variable">$str2</span>))</div><div class="line">&#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"/"</span><span class="string">" . <span class="variable">$str1</span> . "</span>/<span class="string">" contains /"</span><span class="string">" . <span class="variable">$str2</span> . "</span>/<span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"/"</span><span class="string">" . <span class="variable">$str1</span> . "</span>/<span class="string">" does not contain /"</span><span class="string">" . <span class="variable">$str2</span> . "</span>/<span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>正确运行的输出结果:<br><!-- more --><br><code>&quot;hello world&quot; does not contain &quot;he&quot;</code><br>strpos是返回字符串str2在str1的位置，没有找到则返回false；php是弱类型语言；然而实际上这次返回了0而在if语句中0也被当作false,所以我们需要对false做类型判断，正确的代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$str1</span> = <span class="string">'hello world'</span>;</div><div class="line"><span class="variable">$str2</span> = <span class="string">'he'</span>;</div><div class="line"><span class="keyword">if</span> (strpos(<span class="variable">$str1</span>, <span class="variable">$str2</span>) !== <span class="literal">false</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"/"</span><span class="string">" . <span class="variable">$str1</span> . "</span>/<span class="string">" contains /"</span><span class="string">" . <span class="variable">$str2</span> . "</span>/<span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"/"</span><span class="string">" . <span class="variable">$str1</span> . "</span>/<span class="string">" does not contain /"</span><span class="string">" . <span class="variable">$str2</span> . "</span>/<span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要注意的是我们使用了!==，在php 和 JS中= !相对== 更为严格需要要求数据类型一致。</p><p><strong>Q2</strong><br>下面的输出结果会是怎样？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$x</span> = 5;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$x</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">"&lt;br /&gt;"</span>;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$x</span>+++<span class="variable">$x</span>++;</div><div class="line"><span class="built_in">echo</span> <span class="string">"&lt;br /&gt;"</span>;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$x</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">"&lt;br /&gt;"</span>;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$x</span>---<span class="variable">$x</span>--;</div><div class="line"><span class="built_in">echo</span> <span class="string">"&lt;br /&gt;"</span>;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$x</span>;</div></pre></td></tr></table></figure><p>实际运行结果是</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="number">11</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><p>关于 $x++ 和 $x–这个问题其实非常容易遇见，我们只需记住$x++使用最近的值，然后才自增。<br>运算符的优先级，++ 是明显高于 +，因此先执行++ 再执行 + 。关于运算符的优先级，有的时候我们真的可以通过括号来让我们的程序更让人直观的了解，毕竟代码不光是用于执行的，有的时候或许团队的可读性也是提高效率的一种。<br><strong>Q3</strong><br>关于变量的引用；<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">a = <span class="string">'1'</span>;</span></div><div class="line"><span class="meta">$</span><span class="bash">b = &amp;<span class="variable">$a</span>;</span></div><div class="line"><span class="meta">$</span><span class="bash">b = <span class="string">"2<span class="variable">$b</span>"</span>;</span></div></pre></td></tr></table></figure></p><p>请问 $a 和 $b的值各位多少<br>部分第一时间会想到 $a=’1’  $b=’21’,仔细一看 $b=&amp;$a,这里$b是变量$a的引用而不是直接 赋值。</p><p><strong>Q4</strong><br>下面是true还是false</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var_dump(<span class="number">0123</span> == <span class="number">123</span>)；</div><div class="line">var_dump('<span class="number">0123</span>' == <span class="number">123</span>);</div><div class="line">var_dump('<span class="number">0123</span>' == <span class="number">123</span>);</div></pre></td></tr></table></figure><p>var_dump(0123 == 123);// false,PHP会默认把0123当作8进制来处理，实际转化为10进制就是83，显然这不是相等的。<br>var_dump(’0123′ == 123);// true这里php会非常有趣的将’0123′转换成一个数字而且默认去掉了前面的0也就是123==123<br>var_dump(’0123′ === 123);// false很显然上面的问题已经说过了数字和字符串类型不一致。</p><p><strong>Q5</strong><br>下面的代码有什么问题吗？输出会是什么，怎样修复它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">referenceTable = array();</span></div><div class="line">referenceTable['val1'] = array(1, 2);</div><div class="line">referenceTable['val2'] = 3;</div><div class="line">referenceTable['val3'] = array(4, 5);</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">testArray = array();</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">testArray = array_merge(<span class="variable">$testArray</span>, <span class="variable">$referenceTable</span>[<span class="string">'val1'</span>]);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">testArray);</span></div><div class="line"><span class="meta">$</span><span class="bash">testArray = array_merge(<span class="variable">$testArray</span>, <span class="variable">$referenceTable</span>[<span class="string">'val2'</span>]);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">testArray);</span></div><div class="line"><span class="meta">$</span><span class="bash">testArray = array_merge(<span class="variable">$testArray</span>, <span class="variable">$referenceTable</span>[<span class="string">'val3'</span>]);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">testArray);</span></div></pre></td></tr></table></figure><p>实际输出如下：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;[<span class="number">0</span>] =&gt; <span class="keyword">int</span>(<span class="number">1</span>) [<span class="number">1</span>] =&gt; <span class="keyword">int</span>(<span class="number">2</span>)&#125;</div><div class="line"><span class="keyword">NULL</span></div><div class="line"><span class="keyword">NULL</span></div></pre></td></tr></table></figure></p><p>运行的时候你或许还能看到下面的警告</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">warning: array_merge() : <span class="type">Argument</span> #<span class="number">2</span> <span class="keyword">is</span> <span class="keyword">not</span> an <span class="keyword">array</span></div><div class="line">warning: array_merge() : <span class="type">Argument</span> #<span class="number">1</span> <span class="keyword">is</span> <span class="keyword">not</span> an <span class="keyword">array</span></div></pre></td></tr></table></figure><p>array_merge需要传入的参数都是数组，如果不是，则会返回null。 你可以这样修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">testArray = array_merge(<span class="variable">$testArray</span>, (array)<span class="variable">$referenceTable</span>[<span class="string">'val1'</span>]);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">testArray);</span></div><div class="line"><span class="meta">$</span><span class="bash">testArray = array_merge(<span class="variable">$testArray</span>, (array)<span class="variable">$referenceTable</span>[<span class="string">'val2'</span>]);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">testArray);</span></div><div class="line"><span class="meta">$</span><span class="bash">testArray = array_merge(<span class="variable">$testArray</span>, (array)<span class="variable">$referenceTable</span>[<span class="string">'val3'</span>]);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">testArray);</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;5个值得深思的 PHP 面试问题&lt;br&gt;文章所罗列的问题虽然看似简单，但是每个背后都涵盖了一个或几个大家容易忽视的基础知识点，希望能够帮助到你的面试和平时工作。&lt;br&gt;
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="php" scheme="https://upeng.github.io/blog/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>laravel migration</title>
    <link href="https://upeng.github.io/blog/2016/05/07/laravel-migration/"/>
    <id>https://upeng.github.io/blog/2016/05/07/laravel-migration/</id>
    <published>2016-05-07T12:10:00.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="laravel-migration工具"><a href="#laravel-migration工具" class="headerlink" title="laravel migration工具"></a>laravel migration工具</h2><h3 id="新建表articles步骤"><a href="#新建表articles步骤" class="headerlink" title="新建表articles步骤"></a>新建表<code>articles</code>步骤</h3><ul><li>migrations下生成<code>2015_12_13_104637_create_articles_table.php</code>文件<br><code>php artisan make:migration create_articles_table --create=articles</code></li><li>修改生成的文件<code>2015_12_13_104637_create_articles_table.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Schema::create(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">    $table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">    $table-&gt;string(<span class="string">'title'</span>);</div><div class="line">    $table-&gt;text(<span class="string">'content'</span>);</div><div class="line">    $table-&gt;timestamp(<span class="string">'published_at'</span>);</div><div class="line">    $table-&gt;timestamps();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>保存文件，执行下面命令，数据库中生成articls表<br><code>php artisan migrate</code></li></ul><h3 id="删除刚才创建的table"><a href="#删除刚才创建的table" class="headerlink" title="删除刚才创建的table"></a>删除刚才创建的table</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//回退操作</span></div><div class="line">php artisan <span class="string">migrate:</span>rollback</div></pre></td></tr></table></figure><a id="more"></a><h3 id="增加表字段"><a href="#增加表字段" class="headerlink" title="增加表字段"></a>增加表字段</h3><ol><li><p>如果将table drop后在create中添加字段,会删除表中已有数据。</p></li><li><p>在migrations下新建文件<code>add_intro_into_articles</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:migration add_intro_into_articles --<span class="keyword">table</span>=articles</div></pre></td></tr></table></figure></li><li><p>修改add_intro_into_articles</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Schema::table(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;string(<span class="string">'intro'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Schema::table(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;dropColumn(<span class="string">'intro'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><ul><li>注意关键字的不同，导致生成的文件中匿名函数书写的不同<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--create=tablename</span></div><div class="line">Schema::<span class="built_in">create</span>(<span class="string">'articles'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">--table=tablename</span></div><div class="line">Schema::<span class="built_in">table</span>(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;laravel-migration工具&quot;&gt;&lt;a href=&quot;#laravel-migration工具&quot; class=&quot;headerlink&quot; title=&quot;laravel migration工具&quot;&gt;&lt;/a&gt;laravel migration工具&lt;/h2&gt;&lt;h3 id=&quot;新建表articles步骤&quot;&gt;&lt;a href=&quot;#新建表articles步骤&quot; class=&quot;headerlink&quot; title=&quot;新建表articles步骤&quot;&gt;&lt;/a&gt;新建表&lt;code&gt;articles&lt;/code&gt;步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;migrations下生成&lt;code&gt;2015_12_13_104637_create_articles_table.php&lt;/code&gt;文件&lt;br&gt;&lt;code&gt;php artisan make:migration create_articles_table --create=articles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改生成的文件&lt;code&gt;2015_12_13_104637_create_articles_table.php&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Schema::create(&lt;span class=&quot;string&quot;&gt;&#39;articles&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Blueprint $table)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $table-&amp;gt;increments(&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $table-&amp;gt;string(&lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $table-&amp;gt;text(&lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $table-&amp;gt;timestamp(&lt;span class=&quot;string&quot;&gt;&#39;published_at&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $table-&amp;gt;timestamps();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;保存文件，执行下面命令，数据库中生成articls表&lt;br&gt;&lt;code&gt;php artisan migrate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;删除刚才创建的table&quot;&gt;&lt;a href=&quot;#删除刚才创建的table&quot; class=&quot;headerlink&quot; title=&quot;删除刚才创建的table&quot;&gt;&lt;/a&gt;删除刚才创建的table&lt;/h3&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//回退操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;php artisan &lt;span class=&quot;string&quot;&gt;migrate:&lt;/span&gt;rollback&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://upeng.github.io/blog/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>laravel的blade视图模板引擎</title>
    <link href="https://upeng.github.io/blog/2016/04/29/laravel-blade/"/>
    <id>https://upeng.github.io/blog/2016/04/29/laravel-blade/</id>
    <published>2016-04-28T16:18:00.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="blade模板引擎使用"><a href="#blade模板引擎使用" class="headerlink" title="blade模板引擎使用"></a>blade模板引擎使用</h3><p>很多时候，我们的view模板有很多重复的地方，比如head、footer部分，当然可以定义一些共用的部分，置于common文件夹下，然后使用include将其引入进来。而blade有一套自己的策略</p><p>比如定义一个<code>common.blade.php</code>文件，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Laravel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Lato:100"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;<span class="attribute">height</span>: <span class="number">100%</span>;&#125;</span></div><div class="line"><span class="css">            <span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">display</span>: table;<span class="attribute">font-weight</span>: <span class="number">100</span>;<span class="attribute">font-family</span>: <span class="string">'Lato'</span>;&#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.container</span> &#123;<span class="attribute">text-align</span>: center;<span class="attribute">display</span>: table-cell;<span class="attribute">vertical-align</span>: middle;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.content</span> &#123;<span class="attribute">text-align</span>: center;<span class="attribute">display</span>: inline-block;&#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.title</span> &#123;<span class="attribute">font-size</span>: <span class="number">96px</span>;&#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.footer</span>&#123;<span class="attribute">color</span>: green;<span class="attribute">font-size</span>: <span class="number">100px</span>;&#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            @yield('content')</div><div class="line">            @yield('footer')</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><a id="more"></a><ul><li>其中，<code>@yield(&#39;content&#39;)</code>和 <code>@yield(&#39;footer&#39;)</code>是根据不同模板的需求进行动态设置与填充的</li><li><code>welcome.blade.php</code>和<code>contact.blade.php</code>模板与<code>common.blade.php</code>样式相近，只是内容不同，或者后者内容更多。他们均可以继承<code>common.blade.php</code>的所有内容，需要content则可以自定义显示，需要footer可以自定义显示footer</li><li>示例如下</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># welcome.blade.php</div><div class="line"><span class="meta">@extends(<span class="meta-string">'common'</span>)</span>      <span class="comment">//继承common.blade.php</span></div><div class="line"><span class="meta">@section(<span class="meta-string">'content'</span>)</span>     <span class="comment">//开始</span></div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">content</span>"&gt;</span></div><div class="line">        &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">title</span>"&gt;<span class="title">Laravel</span> 5 -<span class="title">welcome</span>&lt;<span class="type">/div</span>&gt;</span></div><div class="line">    &lt;/div&gt;</div><div class="line"><span class="meta">@stop</span>                   <span class="comment">//结束</span></div><div class="line"></div><div class="line"></div><div class="line"># contact.blade.php</div><div class="line"><span class="meta">@extends(<span class="meta-string">'app'</span>)</span></div><div class="line"><span class="meta">@section(<span class="meta-string">'content'</span>)</span> </div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">content</span>"&gt;</span></div><div class="line">        &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">title</span>"&gt;<span class="title">contact</span> 825415473<span class="meta">@qq</span>.<span class="title">com</span>&lt;<span class="type">/div</span>&gt;</span></div><div class="line">    &lt;/div&gt;</div><div class="line"><span class="meta">@stop</span></div><div class="line"><span class="meta">@section(<span class="meta-string">'footer'</span>)</span></div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">footer</span>"&gt;</span></div><div class="line">        Laravel <span class="number">5</span></div><div class="line">    &lt;/div&gt;</div><div class="line"><span class="meta">@stop</span></div></pre></td></tr></table></figure><h3 id="blade中的条件判断和循环操作"><a href="#blade中的条件判断和循环操作" class="headerlink" title="blade中的条件判断和循环操作"></a>blade中的条件判断和循环操作</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 条件判断和循环操作，通用方法是在&lt;?php **** ?&gt;</span></div><div class="line"><span class="meta"># blade有自己的语法</span></div><div class="line"><span class="symbol">@extends</span>(<span class="string">'app'</span>)</div><div class="line"><span class="symbol">@section</span>(<span class="string">'content'</span>)</div><div class="line"></div><div class="line"><span class="symbol">@if</span>($condiction == <span class="string">'bool'</span>)</div><div class="line">    &lt;h1&gt;&#123;!!$name!!&#125;&lt;/h1&gt;</div><div class="line"><span class="symbol">@else</span></div><div class="line">    &lt;h1&gt;&#123;&#123;$time&#125;&#125;&lt;/h1&gt;</div><div class="line"><span class="symbol">@endif</span></div><div class="line"></div><div class="line">&lt;h2&gt;</div><div class="line">    <span class="symbol">@foreach</span>($arr as $key =&gt; $value)</div><div class="line">        &#123;&#123;$value&#125;&#125;</div><div class="line">    <span class="symbol">@endforeach</span></div><div class="line">&lt;/h2&gt;</div><div class="line"></div><div class="line"><span class="symbol">@stop</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;blade模板引擎使用&quot;&gt;&lt;a href=&quot;#blade模板引擎使用&quot; class=&quot;headerlink&quot; title=&quot;blade模板引擎使用&quot;&gt;&lt;/a&gt;blade模板引擎使用&lt;/h3&gt;&lt;p&gt;很多时候，我们的view模板有很多重复的地方，比如head、footer部分，当然可以定义一些共用的部分，置于common文件夹下，然后使用include将其引入进来。而blade有一套自己的策略&lt;/p&gt;
&lt;p&gt;比如定义一个&lt;code&gt;common.blade.php&lt;/code&gt;文件，如下：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Laravel&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://fonts.googleapis.com/css?family=Lato:100&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Lato&#39;&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table-cell;&lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;selector-class&quot;&gt;.content&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;selector-class&quot;&gt;.title&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;96px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;selector-class&quot;&gt;.footer&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: green;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @yield(&#39;content&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @yield(&#39;footer&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://upeng.github.io/blog/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库之索引优化</title>
    <link href="https://upeng.github.io/blog/2016/04/27/mysqlperformance03/"/>
    <id>https://upeng.github.io/blog/2016/04/27/mysqlperformance03/</id>
    <published>2016-04-26T16:44:33.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何选择合适的列建立索引"><a href="#如何选择合适的列建立索引" class="headerlink" title="如何选择合适的列建立索引?"></a>如何选择合适的列建立索引?</h2><ol><li>在where从句、group by从句、order by从句、on从句中出现的列</li><li>索引字段越小越好</li><li>离散度大的列放到联合索引的前面</li></ol><blockquote><p>理解离散度<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> payment <span class="keyword">where</span> staff_id = <span class="number">2</span> <span class="keyword">AND</span> customer_id = <span class="number">584</span>;</div></pre></td></tr></table></figure></p><p>是index(staff_id, customer_id)好还是index(customer_id, staff_id)好？</p></blockquote><p><strong>备注</strong>：比较staff_id和customer_id两者的离散度，那个离散度高，那个列就放置到联合索引的前面<br><a id="more"></a></p><blockquote><p>计算离散度：</p></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> staff_id), <span class="built_in">count</span>(<span class="keyword">distinct</span> customer_id) <span class="keyword">FROM</span> payment;</div></pre></td></tr></table></figure><h2 id="索引优化SQL的方法"><a href="#索引优化SQL的方法" class="headerlink" title="索引优化SQL的方法"></a>索引优化SQL的方法</h2><h3 id="索引的维护及优化—重复及冗余索引"><a href="#索引的维护及优化—重复及冗余索引" class="headerlink" title="索引的维护及优化—重复及冗余索引"></a>索引的维护及优化—重复及冗余索引</h3><blockquote><p>重复索引</p></blockquote><p>重复索引是指相同的列以相同的顺序建立同类型的索引，如下表中primary key 和ID列上的索引就是重复索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</div><div class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</div><div class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    titile <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> nullm,</div><div class="line">    <span class="keyword">unique</span>(<span class="keyword">id</span>)</div><div class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</div></pre></td></tr></table></figure></p><blockquote><p>冗余索引</p></blockquote><p>冗余索引是指多个索引的前缀列相同，或是在联合索引中包含了主键的索引，下面这个例子中key(name, id)就是一个冗余索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</div><div class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</div><div class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    titile <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> nullm,</div><div class="line">    <span class="keyword">key</span>(<span class="keyword">name</span>, <span class="keyword">id</span>)</div><div class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</div></pre></td></tr></table></figure></p><blockquote><p>工具检查重复及冗余索引</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pt-duplicate-<span class="type">key</span>-checker -uroot  -p <span class="number">123</span> -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div></pre></td></tr></table></figure><h3 id="索引的维护及优化—删除不用索引"><a href="#索引的维护及优化—删除不用索引" class="headerlink" title="索引的维护及优化—删除不用索引"></a>索引的维护及优化—删除不用索引</h3><p> 目前mysql中还没有记录索引的使用情况，但是在perconMySQL和MariaDB中可以通过INDEX_STATISTICS表来查看哪些索引未使用，但是在MySQL中目前只能通过慢查询日志配合pt-index-usage工具来进行索引使用情况的分析<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pt</span>-<span class="built_in">index</span>-usage -uroot -p123 mysql-slow.<span class="built_in">log</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何选择合适的列建立索引&quot;&gt;&lt;a href=&quot;#如何选择合适的列建立索引&quot; class=&quot;headerlink&quot; title=&quot;如何选择合适的列建立索引?&quot;&gt;&lt;/a&gt;如何选择合适的列建立索引?&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在where从句、group by从句、order by从句、on从句中出现的列&lt;/li&gt;
&lt;li&gt;索引字段越小越好&lt;/li&gt;
&lt;li&gt;离散度大的列放到联合索引的前面&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;理解离散度&lt;br&gt;&lt;figure class=&quot;highlight n1ql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; payment &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; staff_id = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; customer_id = &lt;span class=&quot;number&quot;&gt;584&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是index(staff_id, customer_id)好还是index(customer_id, staff_id)好？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：比较staff_id和customer_id两者的离散度，那个离散度高，那个列就放置到联合索引的前面&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://upeng.github.io/blog/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="https://upeng.github.io/blog/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>laravel初体验</title>
    <link href="https://upeng.github.io/blog/2016/04/25/laravel-primary/"/>
    <id>https://upeng.github.io/blog/2016/04/25/laravel-primary/</id>
    <published>2016-04-25T12:10:00.000Z</published>
    <updated>2017-06-28T16:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h3><blockquote><p>路由文件routes.php</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*默认是以匿名函数的方式进行路由,/是当前域名下加载视图文件welcome.blade.php */</span></div><div class="line"></div><div class="line">Route::<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</div><div class="line">&#125;);</div><div class="line">Route::<span class="keyword">get</span>(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> view(<span class="string">'about'</span>);</div><div class="line">&#125;);</div><div class="line">Route::<span class="keyword">get</span>(<span class="string">'/blog'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> view(<span class="string">'blog.content'</span>);  <span class="comment">//其中的“.”可以用“/”代替</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//如果使用非匿名函数的方式</span></div><div class="line"></div><div class="line">Route::<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="string">'UserController@index'</span>);</div><div class="line">Route::<span class="keyword">get</span>(<span class="string">'/about'</span>, <span class="string">'UserController@about'</span>);</div><div class="line">Route::<span class="keyword">get</span>(<span class="string">'/blog'</span>, <span class="string">'UserController@blog'</span>);</div></pre></td></tr></table></figure><h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><blockquote><ol><li>可以手动创建Controller，也可以使用命令行创建控制器<code>php artisan</code>工具</li><li>参数 –plain使用则不会生成一些默认的方法如index，create等</li></ol></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:controller</span> <span class="selector-tag">UserController</span></div><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:controller</span> <span class="selector-tag">TestController</span> <span class="selector-tag">--plain</span></div></pre></td></tr></table></figure><h3 id="视图的加载"><a href="#视图的加载" class="headerlink" title="视图的加载"></a>视图的加载</h3><blockquote><p>加载视图的方法</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">return</span> <span class="title">view</span><span class="params">(<span class="string">'welcome'</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">return</span> <span class="title">view</span><span class="params">(<span class="string">'blog/title'</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">return</span> <span class="title">view</span><span class="params">(<span class="string">'blog.content'</span>)</span></span>;</div></pre></td></tr></table></figure><blockquote><p>怎么向blade视图传递变量</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$name = <span class="string">'&lt;p style="color:red"&gt;upfriend&lt;/p&gt;'</span>;</div><div class="line">$time = date(<span class="string">'Y-m-d'</span>, time());</div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'first'</span> =&gt; <span class="string">'jerry'</span>, <span class="string">'last'</span> =&gt; <span class="string">'bool'</span>);</div><div class="line"></div><div class="line"><span class="comment">//传递变量-通用方式传递给$data数组</span></div><div class="line">$data[<span class="string">'name'</span>] = $name;</div><div class="line">$data[<span class="string">'time'</span>] = $time; </div><div class="line"><span class="keyword">return</span> view(<span class="string">'blog.content'</span>, $data);</div><div class="line"></div><div class="line"><span class="comment">//Laravel链式操作方式 </span></div><div class="line"><span class="keyword">return</span> view(<span class="string">'blog.content'</span>)-&gt;(<span class="string">'name'</span> =&gt; $name);  <span class="comment">//传递一个变量</span></div><div class="line"><span class="keyword">return</span> view(<span class="string">'blog.content'</span>)-&gt;with(<span class="keyword">array</span>(<span class="string">'name'</span> =&gt; $name, <span class="string">'time'</span> =&gt; $time));  <span class="comment">//传递数组变量</span></div><div class="line"></div><div class="line"><span class="comment">//compact方法</span></div><div class="line"><span class="keyword">return</span> view(<span class="string">'blog.content'</span>, compact(<span class="string">'name'</span>, <span class="string">'time'</span>, <span class="string">'arr'</span>));  <span class="comment">//去掉$的变量名</span></div></pre></td></tr></table></figure><blockquote><p>如何正确输出变量的值</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml">//原生PHP输出数据方式，默认会对变量中的字符会进行转义（xss?）</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="php"><span class="meta">&lt;?</span>=name<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">//Laravel的blade模板引擎渲染方式，两个大括号</span><span class="template-variable">&#123;&#123;&#125;</span><span class="xml">&#125;表示转义后输出</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;name&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  //浏览器输出<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>upfriend<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;!!name!!&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  //会见变量作为html,输出红色字体的upfriend</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;访问流程&quot;&gt;&lt;a href=&quot;#访问流程&quot; class=&quot;headerlink&quot; title=&quot;访问流程&quot;&gt;&lt;/a&gt;访问流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;路由文件routes.php&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="PHP编程" scheme="https://upeng.github.io/blog/categories/PHP%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="laravel" scheme="https://upeng.github.io/blog/tags/laravel/"/>
    
  </entry>
  
</feed>
